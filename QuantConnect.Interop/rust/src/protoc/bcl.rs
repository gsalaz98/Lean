// This file is generated by rust-protobuf 2.14.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `bcl.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_14_0;

#[derive(PartialEq,Clone,Default)]
pub struct TimeSpan {
    // message fields
    pub value: i64,
    pub scale: TimeSpan_TimeSpanScale,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TimeSpan {
    fn default() -> &'a TimeSpan {
        <TimeSpan as ::protobuf::Message>::default_instance()
    }
}

impl TimeSpan {
    pub fn new() -> TimeSpan {
        ::std::default::Default::default()
    }

    // sint64 value = 1;


    pub fn get_value(&self) -> i64 {
        self.value
    }
    pub fn clear_value(&mut self) {
        self.value = 0;
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: i64) {
        self.value = v;
    }

    // .bcl.TimeSpan.TimeSpanScale scale = 2;


    pub fn get_scale(&self) -> TimeSpan_TimeSpanScale {
        self.scale
    }
    pub fn clear_scale(&mut self) {
        self.scale = TimeSpan_TimeSpanScale::DAYS;
    }

    // Param is passed by value, moved
    pub fn set_scale(&mut self, v: TimeSpan_TimeSpanScale) {
        self.scale = v;
    }
}

impl ::protobuf::Message for TimeSpan {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sint64()?;
                    self.value = tmp;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.scale, 2, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.value != 0 {
            my_size += ::protobuf::rt::value_varint_zigzag_size(1, self.value);
        }
        if self.scale != TimeSpan_TimeSpanScale::DAYS {
            my_size += ::protobuf::rt::enum_size(2, self.scale);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.value != 0 {
            os.write_sint64(1, self.value)?;
        }
        if self.scale != TimeSpan_TimeSpanScale::DAYS {
            os.write_enum(2, self.scale.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TimeSpan {
        TimeSpan::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeSint64>(
                    "value",
                    |m: &TimeSpan| { &m.value },
                    |m: &mut TimeSpan| { &mut m.value },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<TimeSpan_TimeSpanScale>>(
                    "scale",
                    |m: &TimeSpan| { &m.scale },
                    |m: &mut TimeSpan| { &mut m.scale },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<TimeSpan>(
                    "TimeSpan",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TimeSpan {
        static mut instance: ::protobuf::lazy::Lazy<TimeSpan> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(TimeSpan::new)
        }
    }
}

impl ::protobuf::Clear for TimeSpan {
    fn clear(&mut self) {
        self.value = 0;
        self.scale = TimeSpan_TimeSpanScale::DAYS;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TimeSpan {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TimeSpan {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum TimeSpan_TimeSpanScale {
    DAYS = 0,
    HOURS = 1,
    MINUTES = 2,
    SECONDS = 3,
    MILLISECONDS = 4,
    TICKS = 5,
    MINMAX = 15,
}

impl ::protobuf::ProtobufEnum for TimeSpan_TimeSpanScale {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<TimeSpan_TimeSpanScale> {
        match value {
            0 => ::std::option::Option::Some(TimeSpan_TimeSpanScale::DAYS),
            1 => ::std::option::Option::Some(TimeSpan_TimeSpanScale::HOURS),
            2 => ::std::option::Option::Some(TimeSpan_TimeSpanScale::MINUTES),
            3 => ::std::option::Option::Some(TimeSpan_TimeSpanScale::SECONDS),
            4 => ::std::option::Option::Some(TimeSpan_TimeSpanScale::MILLISECONDS),
            5 => ::std::option::Option::Some(TimeSpan_TimeSpanScale::TICKS),
            15 => ::std::option::Option::Some(TimeSpan_TimeSpanScale::MINMAX),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [TimeSpan_TimeSpanScale] = &[
            TimeSpan_TimeSpanScale::DAYS,
            TimeSpan_TimeSpanScale::HOURS,
            TimeSpan_TimeSpanScale::MINUTES,
            TimeSpan_TimeSpanScale::SECONDS,
            TimeSpan_TimeSpanScale::MILLISECONDS,
            TimeSpan_TimeSpanScale::TICKS,
            TimeSpan_TimeSpanScale::MINMAX,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new_pb_name::<TimeSpan_TimeSpanScale>("TimeSpan.TimeSpanScale", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for TimeSpan_TimeSpanScale {
}

impl ::std::default::Default for TimeSpan_TimeSpanScale {
    fn default() -> Self {
        TimeSpan_TimeSpanScale::DAYS
    }
}

impl ::protobuf::reflect::ProtobufValue for TimeSpan_TimeSpanScale {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(self.descriptor())
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DateTime {
    // message fields
    pub value: i64,
    pub scale: DateTime_TimeSpanScale,
    pub kind: DateTime_DateTimeKind,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DateTime {
    fn default() -> &'a DateTime {
        <DateTime as ::protobuf::Message>::default_instance()
    }
}

impl DateTime {
    pub fn new() -> DateTime {
        ::std::default::Default::default()
    }

    // sint64 value = 1;


    pub fn get_value(&self) -> i64 {
        self.value
    }
    pub fn clear_value(&mut self) {
        self.value = 0;
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: i64) {
        self.value = v;
    }

    // .bcl.DateTime.TimeSpanScale scale = 2;


    pub fn get_scale(&self) -> DateTime_TimeSpanScale {
        self.scale
    }
    pub fn clear_scale(&mut self) {
        self.scale = DateTime_TimeSpanScale::DAYS;
    }

    // Param is passed by value, moved
    pub fn set_scale(&mut self, v: DateTime_TimeSpanScale) {
        self.scale = v;
    }

    // .bcl.DateTime.DateTimeKind kind = 3;


    pub fn get_kind(&self) -> DateTime_DateTimeKind {
        self.kind
    }
    pub fn clear_kind(&mut self) {
        self.kind = DateTime_DateTimeKind::UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_kind(&mut self, v: DateTime_DateTimeKind) {
        self.kind = v;
    }
}

impl ::protobuf::Message for DateTime {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sint64()?;
                    self.value = tmp;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.scale, 2, &mut self.unknown_fields)?
                },
                3 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.kind, 3, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.value != 0 {
            my_size += ::protobuf::rt::value_varint_zigzag_size(1, self.value);
        }
        if self.scale != DateTime_TimeSpanScale::DAYS {
            my_size += ::protobuf::rt::enum_size(2, self.scale);
        }
        if self.kind != DateTime_DateTimeKind::UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(3, self.kind);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.value != 0 {
            os.write_sint64(1, self.value)?;
        }
        if self.scale != DateTime_TimeSpanScale::DAYS {
            os.write_enum(2, self.scale.value())?;
        }
        if self.kind != DateTime_DateTimeKind::UNSPECIFIED {
            os.write_enum(3, self.kind.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DateTime {
        DateTime::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeSint64>(
                    "value",
                    |m: &DateTime| { &m.value },
                    |m: &mut DateTime| { &mut m.value },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<DateTime_TimeSpanScale>>(
                    "scale",
                    |m: &DateTime| { &m.scale },
                    |m: &mut DateTime| { &mut m.scale },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<DateTime_DateTimeKind>>(
                    "kind",
                    |m: &DateTime| { &m.kind },
                    |m: &mut DateTime| { &mut m.kind },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<DateTime>(
                    "DateTime",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DateTime {
        static mut instance: ::protobuf::lazy::Lazy<DateTime> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(DateTime::new)
        }
    }
}

impl ::protobuf::Clear for DateTime {
    fn clear(&mut self) {
        self.value = 0;
        self.scale = DateTime_TimeSpanScale::DAYS;
        self.kind = DateTime_DateTimeKind::UNSPECIFIED;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DateTime {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DateTime {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum DateTime_TimeSpanScale {
    DAYS = 0,
    HOURS = 1,
    MINUTES = 2,
    SECONDS = 3,
    MILLISECONDS = 4,
    TICKS = 5,
    MINMAX = 15,
}

impl ::protobuf::ProtobufEnum for DateTime_TimeSpanScale {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<DateTime_TimeSpanScale> {
        match value {
            0 => ::std::option::Option::Some(DateTime_TimeSpanScale::DAYS),
            1 => ::std::option::Option::Some(DateTime_TimeSpanScale::HOURS),
            2 => ::std::option::Option::Some(DateTime_TimeSpanScale::MINUTES),
            3 => ::std::option::Option::Some(DateTime_TimeSpanScale::SECONDS),
            4 => ::std::option::Option::Some(DateTime_TimeSpanScale::MILLISECONDS),
            5 => ::std::option::Option::Some(DateTime_TimeSpanScale::TICKS),
            15 => ::std::option::Option::Some(DateTime_TimeSpanScale::MINMAX),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [DateTime_TimeSpanScale] = &[
            DateTime_TimeSpanScale::DAYS,
            DateTime_TimeSpanScale::HOURS,
            DateTime_TimeSpanScale::MINUTES,
            DateTime_TimeSpanScale::SECONDS,
            DateTime_TimeSpanScale::MILLISECONDS,
            DateTime_TimeSpanScale::TICKS,
            DateTime_TimeSpanScale::MINMAX,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new_pb_name::<DateTime_TimeSpanScale>("DateTime.TimeSpanScale", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for DateTime_TimeSpanScale {
}

impl ::std::default::Default for DateTime_TimeSpanScale {
    fn default() -> Self {
        DateTime_TimeSpanScale::DAYS
    }
}

impl ::protobuf::reflect::ProtobufValue for DateTime_TimeSpanScale {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(self.descriptor())
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum DateTime_DateTimeKind {
    UNSPECIFIED = 0,
    UTC = 1,
    LOCAL = 2,
}

impl ::protobuf::ProtobufEnum for DateTime_DateTimeKind {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<DateTime_DateTimeKind> {
        match value {
            0 => ::std::option::Option::Some(DateTime_DateTimeKind::UNSPECIFIED),
            1 => ::std::option::Option::Some(DateTime_DateTimeKind::UTC),
            2 => ::std::option::Option::Some(DateTime_DateTimeKind::LOCAL),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [DateTime_DateTimeKind] = &[
            DateTime_DateTimeKind::UNSPECIFIED,
            DateTime_DateTimeKind::UTC,
            DateTime_DateTimeKind::LOCAL,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new_pb_name::<DateTime_DateTimeKind>("DateTime.DateTimeKind", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for DateTime_DateTimeKind {
}

impl ::std::default::Default for DateTime_DateTimeKind {
    fn default() -> Self {
        DateTime_DateTimeKind::UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for DateTime_DateTimeKind {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(self.descriptor())
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct NetObjectProxy {
    // message fields
    pub existingObjectKey: i32,
    pub newObjectKey: i32,
    pub existingTypeKey: i32,
    pub newTypeKey: i32,
    pub typeName: ::std::string::String,
    pub payload: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a NetObjectProxy {
    fn default() -> &'a NetObjectProxy {
        <NetObjectProxy as ::protobuf::Message>::default_instance()
    }
}

impl NetObjectProxy {
    pub fn new() -> NetObjectProxy {
        ::std::default::Default::default()
    }

    // int32 existingObjectKey = 1;


    pub fn get_existingObjectKey(&self) -> i32 {
        self.existingObjectKey
    }
    pub fn clear_existingObjectKey(&mut self) {
        self.existingObjectKey = 0;
    }

    // Param is passed by value, moved
    pub fn set_existingObjectKey(&mut self, v: i32) {
        self.existingObjectKey = v;
    }

    // int32 newObjectKey = 2;


    pub fn get_newObjectKey(&self) -> i32 {
        self.newObjectKey
    }
    pub fn clear_newObjectKey(&mut self) {
        self.newObjectKey = 0;
    }

    // Param is passed by value, moved
    pub fn set_newObjectKey(&mut self, v: i32) {
        self.newObjectKey = v;
    }

    // int32 existingTypeKey = 3;


    pub fn get_existingTypeKey(&self) -> i32 {
        self.existingTypeKey
    }
    pub fn clear_existingTypeKey(&mut self) {
        self.existingTypeKey = 0;
    }

    // Param is passed by value, moved
    pub fn set_existingTypeKey(&mut self, v: i32) {
        self.existingTypeKey = v;
    }

    // int32 newTypeKey = 4;


    pub fn get_newTypeKey(&self) -> i32 {
        self.newTypeKey
    }
    pub fn clear_newTypeKey(&mut self) {
        self.newTypeKey = 0;
    }

    // Param is passed by value, moved
    pub fn set_newTypeKey(&mut self, v: i32) {
        self.newTypeKey = v;
    }

    // string typeName = 8;


    pub fn get_typeName(&self) -> &str {
        &self.typeName
    }
    pub fn clear_typeName(&mut self) {
        self.typeName.clear();
    }

    // Param is passed by value, moved
    pub fn set_typeName(&mut self, v: ::std::string::String) {
        self.typeName = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_typeName(&mut self) -> &mut ::std::string::String {
        &mut self.typeName
    }

    // Take field
    pub fn take_typeName(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.typeName, ::std::string::String::new())
    }

    // bytes payload = 10;


    pub fn get_payload(&self) -> &[u8] {
        &self.payload
    }
    pub fn clear_payload(&mut self) {
        self.payload.clear();
    }

    // Param is passed by value, moved
    pub fn set_payload(&mut self, v: ::std::vec::Vec<u8>) {
        self.payload = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_payload(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.payload
    }

    // Take field
    pub fn take_payload(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.payload, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for NetObjectProxy {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.existingObjectKey = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.newObjectKey = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.existingTypeKey = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.newTypeKey = tmp;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.typeName)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.payload)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.existingObjectKey != 0 {
            my_size += ::protobuf::rt::value_size(1, self.existingObjectKey, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.newObjectKey != 0 {
            my_size += ::protobuf::rt::value_size(2, self.newObjectKey, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.existingTypeKey != 0 {
            my_size += ::protobuf::rt::value_size(3, self.existingTypeKey, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.newTypeKey != 0 {
            my_size += ::protobuf::rt::value_size(4, self.newTypeKey, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.typeName.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.typeName);
        }
        if !self.payload.is_empty() {
            my_size += ::protobuf::rt::bytes_size(10, &self.payload);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.existingObjectKey != 0 {
            os.write_int32(1, self.existingObjectKey)?;
        }
        if self.newObjectKey != 0 {
            os.write_int32(2, self.newObjectKey)?;
        }
        if self.existingTypeKey != 0 {
            os.write_int32(3, self.existingTypeKey)?;
        }
        if self.newTypeKey != 0 {
            os.write_int32(4, self.newTypeKey)?;
        }
        if !self.typeName.is_empty() {
            os.write_string(8, &self.typeName)?;
        }
        if !self.payload.is_empty() {
            os.write_bytes(10, &self.payload)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> NetObjectProxy {
        NetObjectProxy::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "existingObjectKey",
                    |m: &NetObjectProxy| { &m.existingObjectKey },
                    |m: &mut NetObjectProxy| { &mut m.existingObjectKey },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "newObjectKey",
                    |m: &NetObjectProxy| { &m.newObjectKey },
                    |m: &mut NetObjectProxy| { &mut m.newObjectKey },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "existingTypeKey",
                    |m: &NetObjectProxy| { &m.existingTypeKey },
                    |m: &mut NetObjectProxy| { &mut m.existingTypeKey },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "newTypeKey",
                    |m: &NetObjectProxy| { &m.newTypeKey },
                    |m: &mut NetObjectProxy| { &mut m.newTypeKey },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "typeName",
                    |m: &NetObjectProxy| { &m.typeName },
                    |m: &mut NetObjectProxy| { &mut m.typeName },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "payload",
                    |m: &NetObjectProxy| { &m.payload },
                    |m: &mut NetObjectProxy| { &mut m.payload },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<NetObjectProxy>(
                    "NetObjectProxy",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static NetObjectProxy {
        static mut instance: ::protobuf::lazy::Lazy<NetObjectProxy> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(NetObjectProxy::new)
        }
    }
}

impl ::protobuf::Clear for NetObjectProxy {
    fn clear(&mut self) {
        self.existingObjectKey = 0;
        self.newObjectKey = 0;
        self.existingTypeKey = 0;
        self.newTypeKey = 0;
        self.typeName.clear();
        self.payload.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for NetObjectProxy {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NetObjectProxy {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Guid {
    // message fields
    pub lo: u64,
    pub hi: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Guid {
    fn default() -> &'a Guid {
        <Guid as ::protobuf::Message>::default_instance()
    }
}

impl Guid {
    pub fn new() -> Guid {
        ::std::default::Default::default()
    }

    // fixed64 lo = 1;


    pub fn get_lo(&self) -> u64 {
        self.lo
    }
    pub fn clear_lo(&mut self) {
        self.lo = 0;
    }

    // Param is passed by value, moved
    pub fn set_lo(&mut self, v: u64) {
        self.lo = v;
    }

    // fixed64 hi = 2;


    pub fn get_hi(&self) -> u64 {
        self.hi
    }
    pub fn clear_hi(&mut self) {
        self.hi = 0;
    }

    // Param is passed by value, moved
    pub fn set_hi(&mut self, v: u64) {
        self.hi = v;
    }
}

impl ::protobuf::Message for Guid {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed64()?;
                    self.lo = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed64()?;
                    self.hi = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.lo != 0 {
            my_size += 9;
        }
        if self.hi != 0 {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.lo != 0 {
            os.write_fixed64(1, self.lo)?;
        }
        if self.hi != 0 {
            os.write_fixed64(2, self.hi)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Guid {
        Guid::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFixed64>(
                    "lo",
                    |m: &Guid| { &m.lo },
                    |m: &mut Guid| { &mut m.lo },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFixed64>(
                    "hi",
                    |m: &Guid| { &m.hi },
                    |m: &mut Guid| { &mut m.hi },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<Guid>(
                    "Guid",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Guid {
        static mut instance: ::protobuf::lazy::Lazy<Guid> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(Guid::new)
        }
    }
}

impl ::protobuf::Clear for Guid {
    fn clear(&mut self) {
        self.lo = 0;
        self.hi = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Guid {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Guid {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Decimal {
    // message fields
    pub lo: u64,
    pub hi: u32,
    pub signScale: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Decimal {
    fn default() -> &'a Decimal {
        <Decimal as ::protobuf::Message>::default_instance()
    }
}

impl Decimal {
    pub fn new() -> Decimal {
        ::std::default::Default::default()
    }

    // uint64 lo = 1;


    pub fn get_lo(&self) -> u64 {
        self.lo
    }
    pub fn clear_lo(&mut self) {
        self.lo = 0;
    }

    // Param is passed by value, moved
    pub fn set_lo(&mut self, v: u64) {
        self.lo = v;
    }

    // uint32 hi = 2;


    pub fn get_hi(&self) -> u32 {
        self.hi
    }
    pub fn clear_hi(&mut self) {
        self.hi = 0;
    }

    // Param is passed by value, moved
    pub fn set_hi(&mut self, v: u32) {
        self.hi = v;
    }

    // uint32 signScale = 3;


    pub fn get_signScale(&self) -> u32 {
        self.signScale
    }
    pub fn clear_signScale(&mut self) {
        self.signScale = 0;
    }

    // Param is passed by value, moved
    pub fn set_signScale(&mut self, v: u32) {
        self.signScale = v;
    }
}

impl ::protobuf::Message for Decimal {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.lo = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.hi = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.signScale = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.lo != 0 {
            my_size += ::protobuf::rt::value_size(1, self.lo, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.hi != 0 {
            my_size += ::protobuf::rt::value_size(2, self.hi, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.signScale != 0 {
            my_size += ::protobuf::rt::value_size(3, self.signScale, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.lo != 0 {
            os.write_uint64(1, self.lo)?;
        }
        if self.hi != 0 {
            os.write_uint32(2, self.hi)?;
        }
        if self.signScale != 0 {
            os.write_uint32(3, self.signScale)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Decimal {
        Decimal::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "lo",
                    |m: &Decimal| { &m.lo },
                    |m: &mut Decimal| { &mut m.lo },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "hi",
                    |m: &Decimal| { &m.hi },
                    |m: &mut Decimal| { &mut m.hi },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "signScale",
                    |m: &Decimal| { &m.signScale },
                    |m: &mut Decimal| { &mut m.signScale },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<Decimal>(
                    "Decimal",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Decimal {
        static mut instance: ::protobuf::lazy::Lazy<Decimal> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(Decimal::new)
        }
    }
}

impl ::protobuf::Clear for Decimal {
    fn clear(&mut self) {
        self.lo = 0;
        self.hi = 0;
        self.signScale = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Decimal {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Decimal {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\tbcl.proto\x12\x03bcl\"\xbc\x01\n\x08TimeSpan\x12\x14\n\x05value\x18\
    \x01\x20\x01(\x12R\x05value\x121\n\x05scale\x18\x02\x20\x01(\x0e2\x1b.bc\
    l.TimeSpan.TimeSpanScaleR\x05scale\"g\n\rTimeSpanScale\x12\x08\n\x04DAYS\
    \x10\0\x12\t\n\x05HOURS\x10\x01\x12\x0b\n\x07MINUTES\x10\x02\x12\x0b\n\
    \x07SECONDS\x10\x03\x12\x10\n\x0cMILLISECONDS\x10\x04\x12\t\n\x05TICKS\
    \x10\x05\x12\n\n\x06MINMAX\x10\x0f\"\xa1\x02\n\x08DateTime\x12\x14\n\x05\
    value\x18\x01\x20\x01(\x12R\x05value\x121\n\x05scale\x18\x02\x20\x01(\
    \x0e2\x1b.bcl.DateTime.TimeSpanScaleR\x05scale\x12.\n\x04kind\x18\x03\
    \x20\x01(\x0e2\x1a.bcl.DateTime.DateTimeKindR\x04kind\"g\n\rTimeSpanScal\
    e\x12\x08\n\x04DAYS\x10\0\x12\t\n\x05HOURS\x10\x01\x12\x0b\n\x07MINUTES\
    \x10\x02\x12\x0b\n\x07SECONDS\x10\x03\x12\x10\n\x0cMILLISECONDS\x10\x04\
    \x12\t\n\x05TICKS\x10\x05\x12\n\n\x06MINMAX\x10\x0f\"3\n\x0cDateTimeKind\
    \x12\x0f\n\x0bUNSPECIFIED\x10\0\x12\x07\n\x03UTC\x10\x01\x12\t\n\x05LOCA\
    L\x10\x02\"\xe2\x01\n\x0eNetObjectProxy\x12,\n\x11existingObjectKey\x18\
    \x01\x20\x01(\x05R\x11existingObjectKey\x12\"\n\x0cnewObjectKey\x18\x02\
    \x20\x01(\x05R\x0cnewObjectKey\x12(\n\x0fexistingTypeKey\x18\x03\x20\x01\
    (\x05R\x0fexistingTypeKey\x12\x1e\n\nnewTypeKey\x18\x04\x20\x01(\x05R\nn\
    ewTypeKey\x12\x1a\n\x08typeName\x18\x08\x20\x01(\tR\x08typeName\x12\x18\
    \n\x07payload\x18\n\x20\x01(\x0cR\x07payload\"&\n\x04Guid\x12\x0e\n\x02l\
    o\x18\x01\x20\x01(\x06R\x02lo\x12\x0e\n\x02hi\x18\x02\x20\x01(\x06R\x02h\
    i\"G\n\x07Decimal\x12\x0e\n\x02lo\x18\x01\x20\x01(\x04R\x02lo\x12\x0e\n\
    \x02hi\x18\x02\x20\x01(\rR\x02hi\x12\x1c\n\tsignScale\x18\x03\x20\x01(\r\
    R\tsignScaleB\x0f\xaa\x02\x0cProtoBuf.BclJ\x90\x1e\n\x06\x12\x04\x0b\0K\
    \x01\n\xf5\x05\n\x01\x0c\x12\x03\x0b\0\x122\x9a\x02\x20The\x20types\x20i\
    n\x20here\x20indicate\x20how\x20protobuf-net\x20represents\x20certain\
    \x20types\x20when\x20using\x20protobuf-net\x20specific\n\x20library\x20f\
    eatures.\x20Note\x20that\x20it\x20is\x20not\x20*required*\x20to\x20use\
    \x20any\x20of\x20these\x20types,\x20and\x20cross-platform\x20code\n\x20s\
    hould\x20usually\x20avoid\x20them\x20completely\x20(ideally\x20starting\
    \x20from\x20a\x20.proto\x20schema)\n2\xfd\x02\x20Some\x20of\x20these\x20\
    are\x20ugly,\x20sorry.\x20The\x20TimeSpan\x20/\x20DateTime\x20dates\x20h\
    ere\x20pre-date\x20the\x20introduction\x20of\x20Timestamp\n\x20and\x20Du\
    ration,\x20and\x20the\x20\"well\x20known\"\x20types\x20should\x20be\x20p\
    referred\x20when\x20possible.\x20Guids\x20are\x20particularly\n\x20awkwa\
    rd\x20-\x20it\x20turns\x20out\x20that\x20there\x20are\x20multiple\x20gui\
    d\x20representations,\x20and\x20I\x20accidentally\x20used\x20one\x20that\
    \n\x20I\x20can\x20only\x20call...\x20\"crazy-endian\".\x20Just\x20make\
    \x20sure\x20you\x20check\x20the\x20order!\n2N\x20It\x20should\x20not\x20\
    be\x20necessary\x20to\x20use\x20bcl.proto\x20from\x20code\x20that\x20use\
    s\x20protobuf-net\n\n\x08\n\x01\x08\x12\x03\r\0)\n\t\n\x02\x08%\x12\x03\
    \r\0)\n\x08\n\x01\x02\x12\x03\x0f\0\x0c\n\n\n\x02\x04\0\x12\x04\x11\0\
    \x1e\x01\n\n\n\x03\x04\0\x01\x12\x03\x11\x08\x10\nH\n\x04\x04\0\x02\0\
    \x12\x03\x12\x02\x13\";\x20the\x20size\x20of\x20the\x20timespan\x20(in\
    \x20units\x20of\x20the\x20selected\x20scale)\n\n\x0c\n\x05\x04\0\x02\0\
    \x05\x12\x03\x12\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x12\t\x0e\n\
    \x0c\n\x05\x04\0\x02\0\x03\x12\x03\x12\x11\x12\n9\n\x04\x04\0\x02\x01\
    \x12\x03\x13\x02\x1a\",\x20the\x20scale\x20of\x20the\x20timespan\x20[def\
    ault\x20=\x20DAYS]\n\n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03\x13\x02\x0f\n\
    \x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x13\x10\x15\n\x0c\n\x05\x04\0\x02\
    \x01\x03\x12\x03\x13\x18\x19\n\x0c\n\x04\x04\0\x04\0\x12\x04\x14\x02\x1d\
    \x03\n\x0c\n\x05\x04\0\x04\0\x01\x12\x03\x14\x07\x14\n\r\n\x06\x04\0\x04\
    \0\x02\0\x12\x03\x15\x04\r\n\x0e\n\x07\x04\0\x04\0\x02\0\x01\x12\x03\x15\
    \x04\x08\n\x0e\n\x07\x04\0\x04\0\x02\0\x02\x12\x03\x15\x0b\x0c\n\r\n\x06\
    \x04\0\x04\0\x02\x01\x12\x03\x16\x04\x0e\n\x0e\n\x07\x04\0\x04\0\x02\x01\
    \x01\x12\x03\x16\x04\t\n\x0e\n\x07\x04\0\x04\0\x02\x01\x02\x12\x03\x16\
    \x0c\r\n\r\n\x06\x04\0\x04\0\x02\x02\x12\x03\x17\x04\x10\n\x0e\n\x07\x04\
    \0\x04\0\x02\x02\x01\x12\x03\x17\x04\x0b\n\x0e\n\x07\x04\0\x04\0\x02\x02\
    \x02\x12\x03\x17\x0e\x0f\n\r\n\x06\x04\0\x04\0\x02\x03\x12\x03\x18\x04\
    \x10\n\x0e\n\x07\x04\0\x04\0\x02\x03\x01\x12\x03\x18\x04\x0b\n\x0e\n\x07\
    \x04\0\x04\0\x02\x03\x02\x12\x03\x18\x0e\x0f\n\r\n\x06\x04\0\x04\0\x02\
    \x04\x12\x03\x19\x04\x15\n\x0e\n\x07\x04\0\x04\0\x02\x04\x01\x12\x03\x19\
    \x04\x10\n\x0e\n\x07\x04\0\x04\0\x02\x04\x02\x12\x03\x19\x13\x14\n\r\n\
    \x06\x04\0\x04\0\x02\x05\x12\x03\x1a\x08\x12\n\x0e\n\x07\x04\0\x04\0\x02\
    \x05\x01\x12\x03\x1a\x08\r\n\x0e\n\x07\x04\0\x04\0\x02\x05\x02\x12\x03\
    \x1a\x10\x11\n\x18\n\x06\x04\0\x04\0\x02\x06\x12\x03\x1c\x04\x10\"\t\x20\
    dubious\n\n\x0e\n\x07\x04\0\x04\0\x02\x06\x01\x12\x03\x1c\x04\n\n\x0e\n\
    \x07\x04\0\x04\0\x02\x06\x02\x12\x03\x1c\r\x0f\n\n\n\x02\x04\x01\x12\x04\
    \x20\07\x01\n\n\n\x03\x04\x01\x01\x12\x03\x20\x08\x10\nJ\n\x04\x04\x01\
    \x02\0\x12\x03!\x02\x13\"=\x20the\x20offset\x20(in\x20units\x20of\x20the\
    \x20selected\x20scale)\x20from\x201970/01/01\n\n\x0c\n\x05\x04\x01\x02\0\
    \x05\x12\x03!\x02\x08\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03!\t\x0e\n\x0c\
    \n\x05\x04\x01\x02\0\x03\x12\x03!\x11\x12\n9\n\x04\x04\x01\x02\x01\x12\
    \x03\"\x02\x1a\",\x20the\x20scale\x20of\x20the\x20timespan\x20[default\
    \x20=\x20DAYS]\n\n\x0c\n\x05\x04\x01\x02\x01\x06\x12\x03\"\x02\x0f\n\x0c\
    \n\x05\x04\x01\x02\x01\x01\x12\x03\"\x10\x15\n\x0c\n\x05\x04\x01\x02\x01\
    \x03\x12\x03\"\x18\x19\nN\n\x04\x04\x01\x02\x02\x12\x03#\x02\x18\"A\x20t\
    he\x20kind\x20of\x20date/time\x20being\x20represented\x20[default\x20=\
    \x20UNSPECIFIED]\n\n\x0c\n\x05\x04\x01\x02\x02\x06\x12\x03#\x02\x0e\n\
    \x0c\n\x05\x04\x01\x02\x02\x01\x12\x03#\x0f\x13\n\x0c\n\x05\x04\x01\x02\
    \x02\x03\x12\x03#\x16\x17\n\x0c\n\x04\x04\x01\x04\0\x12\x04$\x02-\x03\n\
    \x0c\n\x05\x04\x01\x04\0\x01\x12\x03$\x07\x14\n\r\n\x06\x04\x01\x04\0\
    \x02\0\x12\x03%\x04\r\n\x0e\n\x07\x04\x01\x04\0\x02\0\x01\x12\x03%\x04\
    \x08\n\x0e\n\x07\x04\x01\x04\0\x02\0\x02\x12\x03%\x0b\x0c\n\r\n\x06\x04\
    \x01\x04\0\x02\x01\x12\x03&\x04\x0e\n\x0e\n\x07\x04\x01\x04\0\x02\x01\
    \x01\x12\x03&\x04\t\n\x0e\n\x07\x04\x01\x04\0\x02\x01\x02\x12\x03&\x0c\r\
    \n\r\n\x06\x04\x01\x04\0\x02\x02\x12\x03'\x04\x10\n\x0e\n\x07\x04\x01\
    \x04\0\x02\x02\x01\x12\x03'\x04\x0b\n\x0e\n\x07\x04\x01\x04\0\x02\x02\
    \x02\x12\x03'\x0e\x0f\n\r\n\x06\x04\x01\x04\0\x02\x03\x12\x03(\x04\x10\n\
    \x0e\n\x07\x04\x01\x04\0\x02\x03\x01\x12\x03(\x04\x0b\n\x0e\n\x07\x04\
    \x01\x04\0\x02\x03\x02\x12\x03(\x0e\x0f\n\r\n\x06\x04\x01\x04\0\x02\x04\
    \x12\x03)\x04\x15\n\x0e\n\x07\x04\x01\x04\0\x02\x04\x01\x12\x03)\x04\x10\
    \n\x0e\n\x07\x04\x01\x04\0\x02\x04\x02\x12\x03)\x13\x14\n\r\n\x06\x04\
    \x01\x04\0\x02\x05\x12\x03*\x08\x12\n\x0e\n\x07\x04\x01\x04\0\x02\x05\
    \x01\x12\x03*\x08\r\n\x0e\n\x07\x04\x01\x04\0\x02\x05\x02\x12\x03*\x10\
    \x11\n\x18\n\x06\x04\x01\x04\0\x02\x06\x12\x03,\x04\x10\"\t\x20dubious\n\
    \n\x0e\n\x07\x04\x01\x04\0\x02\x06\x01\x12\x03,\x04\n\n\x0e\n\x07\x04\
    \x01\x04\0\x02\x06\x02\x12\x03,\r\x0f\n\x0c\n\x04\x04\x01\x04\x01\x12\
    \x04.\x026\x04\n\x0c\n\x05\x04\x01\x04\x01\x01\x12\x03.\x07\x13\np\n\x06\
    \x04\x01\x04\x01\x02\0\x12\x031\x05\x15\x1aa\x20The\x20time\x20represent\
    ed\x20is\x20not\x20specified\x20as\x20either\x20local\x20time\x20or\x20C\
    oordinated\x20Universal\x20Time\x20(UTC).\n\n\x0e\n\x07\x04\x01\x04\x01\
    \x02\0\x01\x12\x031\x05\x10\n\x0e\n\x07\x04\x01\x04\x01\x02\0\x02\x12\
    \x031\x13\x14\n-\n\x06\x04\x01\x04\x01\x02\x01\x12\x033\x05\r\x1a\x1e\
    \x20The\x20time\x20represented\x20is\x20UTC.\n\n\x0e\n\x07\x04\x01\x04\
    \x01\x02\x01\x01\x12\x033\x05\x08\n\x0e\n\x07\x04\x01\x04\x01\x02\x01\
    \x02\x12\x033\x0b\x0c\n4\n\x06\x04\x01\x04\x01\x02\x02\x12\x035\x05\x0f\
    \x1a%\x20The\x20time\x20represented\x20is\x20local\x20time.\n\n\x0e\n\
    \x07\x04\x01\x04\x01\x02\x02\x01\x12\x035\x05\n\n\x0e\n\x07\x04\x01\x04\
    \x01\x02\x02\x02\x12\x035\r\x0e\n\n\n\x02\x04\x02\x12\x049\0@\x01\n\n\n\
    \x03\x04\x02\x01\x12\x039\x08\x16\nW\n\x04\x04\x02\x02\0\x12\x03:\x02\
    \x1e\"J\x20for\x20a\x20tracked\x20object,\x20the\x20key\x20of\x20the\x20\
    **first**\x20time\x20this\x20object\x20was\x20seen\n\n\x0c\n\x05\x04\x02\
    \x02\0\x05\x12\x03:\x02\x07\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03:\x08\
    \x19\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03:\x1c\x1d\nV\n\x04\x04\x02\x02\
    \x01\x12\x03;\x02\x19\"I\x20for\x20a\x20tracked\x20object,\x20a\x20**new\
    **\x20key,\x20the\x20first\x20time\x20this\x20object\x20is\x20seen\n\n\
    \x0c\n\x05\x04\x02\x02\x01\x05\x12\x03;\x02\x07\n\x0c\n\x05\x04\x02\x02\
    \x01\x01\x12\x03;\x08\x14\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03;\x17\
    \x18\nS\n\x04\x04\x02\x02\x02\x12\x03<\x02\x1c\"F\x20for\x20dynamic\x20t\
    yping,\x20the\x20key\x20of\x20the\x20**first**\x20time\x20this\x20type\
    \x20was\x20seen\n\n\x0c\n\x05\x04\x02\x02\x02\x05\x12\x03<\x02\x07\n\x0c\
    \n\x05\x04\x02\x02\x02\x01\x12\x03<\x08\x17\n\x0c\n\x05\x04\x02\x02\x02\
    \x03\x12\x03<\x1a\x1b\nR\n\x04\x04\x02\x02\x03\x12\x03=\x02\x17\"E\x20fo\
    r\x20dynamic\x20typing,\x20a\x20**new**\x20key,\x20the\x20first\x20time\
    \x20this\x20type\x20is\x20seen\n\n\x0c\n\x05\x04\x02\x02\x03\x05\x12\x03\
    =\x02\x07\n\x0c\n\x05\x04\x02\x02\x03\x01\x12\x03=\x08\x12\n\x0c\n\x05\
    \x04\x02\x02\x03\x03\x12\x03=\x15\x16\n\\\n\x04\x04\x02\x02\x04\x12\x03>\
    \x02\x16\"O\x20for\x20dynamic\x20typing,\x20the\x20name\x20of\x20the\x20\
    type\x20(only\x20present\x20along\x20with\x20newTypeKey)\n\n\x0c\n\x05\
    \x04\x02\x02\x04\x05\x12\x03>\x02\x08\n\x0c\n\x05\x04\x02\x02\x04\x01\
    \x12\x03>\t\x11\n\x0c\n\x05\x04\x02\x02\x04\x03\x12\x03>\x14\x15\nJ\n\
    \x04\x04\x02\x02\x05\x12\x03?\x02\x15\"=\x20the\x20new\x20string/value\
    \x20(only\x20present\x20along\x20with\x20newObjectKey)\n\n\x0c\n\x05\x04\
    \x02\x02\x05\x05\x12\x03?\x02\x07\n\x0c\n\x05\x04\x02\x02\x05\x01\x12\
    \x03?\x08\x0f\n\x0c\n\x05\x04\x02\x02\x05\x03\x12\x03?\x12\x14\n\n\n\x02\
    \x04\x03\x12\x04B\0E\x01\n\n\n\x03\x04\x03\x01\x12\x03B\x08\x0c\n@\n\x04\
    \x04\x03\x02\0\x12\x03C\x02\x11\"3\x20the\x20first\x208\x20bytes\x20of\
    \x20the\x20guid\x20(note:crazy-endian)\n\n\x0c\n\x05\x04\x03\x02\0\x05\
    \x12\x03C\x02\t\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03C\n\x0c\n\x0c\n\x05\
    \x04\x03\x02\0\x03\x12\x03C\x0f\x10\nA\n\x04\x04\x03\x02\x01\x12\x03D\
    \x02\x11\"4\x20the\x20second\x208\x20bytes\x20of\x20the\x20guid\x20(note\
    :crazy-endian)\n\n\x0c\n\x05\x04\x03\x02\x01\x05\x12\x03D\x02\t\n\x0c\n\
    \x05\x04\x03\x02\x01\x01\x12\x03D\n\x0c\n\x0c\n\x05\x04\x03\x02\x01\x03\
    \x12\x03D\x0f\x10\n\n\n\x02\x04\x04\x12\x04G\0K\x01\n\n\n\x03\x04\x04\
    \x01\x12\x03G\x08\x0f\n8\n\x04\x04\x04\x02\0\x12\x03H\x02\x10\"+\x20the\
    \x20first\x2064\x20bits\x20of\x20the\x20underlying\x20value\n\n\x0c\n\
    \x05\x04\x04\x02\0\x05\x12\x03H\x02\x08\n\x0c\n\x05\x04\x04\x02\0\x01\
    \x12\x03H\t\x0b\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03H\x0e\x0f\n6\n\x04\
    \x04\x04\x02\x01\x12\x03I\x02\x10\")\x20the\x20last\x2032\x20bis\x20of\
    \x20the\x20underlying\x20value\n\n\x0c\n\x05\x04\x04\x02\x01\x05\x12\x03\
    I\x02\x08\n\x0c\n\x05\x04\x04\x02\x01\x01\x12\x03I\t\x0b\n\x0c\n\x05\x04\
    \x04\x02\x01\x03\x12\x03I\x0e\x0f\nM\n\x04\x04\x04\x02\x02\x12\x03J\x02\
    \x17\"@\x20the\x20number\x20of\x20decimal\x20digits\x20(bits\x201-16),\
    \x20and\x20the\x20sign\x20(bit\x200)\n\n\x0c\n\x05\x04\x04\x02\x02\x05\
    \x12\x03J\x02\x08\n\x0c\n\x05\x04\x04\x02\x02\x01\x12\x03J\t\x12\n\x0c\n\
    \x05\x04\x04\x02\x02\x03\x12\x03J\x15\x16b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
