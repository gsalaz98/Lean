// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bcl.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bcl_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bcl_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bcl_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bcl_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bcl_2eproto;
namespace bcl {
class DateTime;
class DateTimeDefaultTypeInternal;
extern DateTimeDefaultTypeInternal _DateTime_default_instance_;
class Decimal;
class DecimalDefaultTypeInternal;
extern DecimalDefaultTypeInternal _Decimal_default_instance_;
class Guid;
class GuidDefaultTypeInternal;
extern GuidDefaultTypeInternal _Guid_default_instance_;
class NetObjectProxy;
class NetObjectProxyDefaultTypeInternal;
extern NetObjectProxyDefaultTypeInternal _NetObjectProxy_default_instance_;
class TimeSpan;
class TimeSpanDefaultTypeInternal;
extern TimeSpanDefaultTypeInternal _TimeSpan_default_instance_;
}  // namespace bcl
PROTOBUF_NAMESPACE_OPEN
template<> ::bcl::DateTime* Arena::CreateMaybeMessage<::bcl::DateTime>(Arena*);
template<> ::bcl::Decimal* Arena::CreateMaybeMessage<::bcl::Decimal>(Arena*);
template<> ::bcl::Guid* Arena::CreateMaybeMessage<::bcl::Guid>(Arena*);
template<> ::bcl::NetObjectProxy* Arena::CreateMaybeMessage<::bcl::NetObjectProxy>(Arena*);
template<> ::bcl::TimeSpan* Arena::CreateMaybeMessage<::bcl::TimeSpan>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bcl {

enum TimeSpan_TimeSpanScale : int {
  TimeSpan_TimeSpanScale_DAYS = 0,
  TimeSpan_TimeSpanScale_HOURS = 1,
  TimeSpan_TimeSpanScale_MINUTES = 2,
  TimeSpan_TimeSpanScale_SECONDS = 3,
  TimeSpan_TimeSpanScale_MILLISECONDS = 4,
  TimeSpan_TimeSpanScale_TICKS = 5,
  TimeSpan_TimeSpanScale_MINMAX = 15,
  TimeSpan_TimeSpanScale_TimeSpan_TimeSpanScale_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TimeSpan_TimeSpanScale_TimeSpan_TimeSpanScale_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TimeSpan_TimeSpanScale_IsValid(int value);
constexpr TimeSpan_TimeSpanScale TimeSpan_TimeSpanScale_TimeSpanScale_MIN = TimeSpan_TimeSpanScale_DAYS;
constexpr TimeSpan_TimeSpanScale TimeSpan_TimeSpanScale_TimeSpanScale_MAX = TimeSpan_TimeSpanScale_MINMAX;
constexpr int TimeSpan_TimeSpanScale_TimeSpanScale_ARRAYSIZE = TimeSpan_TimeSpanScale_TimeSpanScale_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TimeSpan_TimeSpanScale_descriptor();
template<typename T>
inline const std::string& TimeSpan_TimeSpanScale_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TimeSpan_TimeSpanScale>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TimeSpan_TimeSpanScale_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TimeSpan_TimeSpanScale_descriptor(), enum_t_value);
}
inline bool TimeSpan_TimeSpanScale_Parse(
    const std::string& name, TimeSpan_TimeSpanScale* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TimeSpan_TimeSpanScale>(
    TimeSpan_TimeSpanScale_descriptor(), name, value);
}
enum DateTime_TimeSpanScale : int {
  DateTime_TimeSpanScale_DAYS = 0,
  DateTime_TimeSpanScale_HOURS = 1,
  DateTime_TimeSpanScale_MINUTES = 2,
  DateTime_TimeSpanScale_SECONDS = 3,
  DateTime_TimeSpanScale_MILLISECONDS = 4,
  DateTime_TimeSpanScale_TICKS = 5,
  DateTime_TimeSpanScale_MINMAX = 15,
  DateTime_TimeSpanScale_DateTime_TimeSpanScale_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DateTime_TimeSpanScale_DateTime_TimeSpanScale_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DateTime_TimeSpanScale_IsValid(int value);
constexpr DateTime_TimeSpanScale DateTime_TimeSpanScale_TimeSpanScale_MIN = DateTime_TimeSpanScale_DAYS;
constexpr DateTime_TimeSpanScale DateTime_TimeSpanScale_TimeSpanScale_MAX = DateTime_TimeSpanScale_MINMAX;
constexpr int DateTime_TimeSpanScale_TimeSpanScale_ARRAYSIZE = DateTime_TimeSpanScale_TimeSpanScale_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DateTime_TimeSpanScale_descriptor();
template<typename T>
inline const std::string& DateTime_TimeSpanScale_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DateTime_TimeSpanScale>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DateTime_TimeSpanScale_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DateTime_TimeSpanScale_descriptor(), enum_t_value);
}
inline bool DateTime_TimeSpanScale_Parse(
    const std::string& name, DateTime_TimeSpanScale* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DateTime_TimeSpanScale>(
    DateTime_TimeSpanScale_descriptor(), name, value);
}
enum DateTime_DateTimeKind : int {
  DateTime_DateTimeKind_UNSPECIFIED = 0,
  DateTime_DateTimeKind_UTC = 1,
  DateTime_DateTimeKind_LOCAL = 2,
  DateTime_DateTimeKind_DateTime_DateTimeKind_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DateTime_DateTimeKind_DateTime_DateTimeKind_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DateTime_DateTimeKind_IsValid(int value);
constexpr DateTime_DateTimeKind DateTime_DateTimeKind_DateTimeKind_MIN = DateTime_DateTimeKind_UNSPECIFIED;
constexpr DateTime_DateTimeKind DateTime_DateTimeKind_DateTimeKind_MAX = DateTime_DateTimeKind_LOCAL;
constexpr int DateTime_DateTimeKind_DateTimeKind_ARRAYSIZE = DateTime_DateTimeKind_DateTimeKind_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DateTime_DateTimeKind_descriptor();
template<typename T>
inline const std::string& DateTime_DateTimeKind_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DateTime_DateTimeKind>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DateTime_DateTimeKind_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DateTime_DateTimeKind_descriptor(), enum_t_value);
}
inline bool DateTime_DateTimeKind_Parse(
    const std::string& name, DateTime_DateTimeKind* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DateTime_DateTimeKind>(
    DateTime_DateTimeKind_descriptor(), name, value);
}
// ===================================================================

class TimeSpan :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bcl.TimeSpan) */ {
 public:
  TimeSpan();
  virtual ~TimeSpan();

  TimeSpan(const TimeSpan& from);
  TimeSpan(TimeSpan&& from) noexcept
    : TimeSpan() {
    *this = ::std::move(from);
  }

  inline TimeSpan& operator=(const TimeSpan& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimeSpan& operator=(TimeSpan&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TimeSpan& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TimeSpan* internal_default_instance() {
    return reinterpret_cast<const TimeSpan*>(
               &_TimeSpan_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TimeSpan& a, TimeSpan& b) {
    a.Swap(&b);
  }
  inline void Swap(TimeSpan* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TimeSpan* New() const final {
    return CreateMaybeMessage<TimeSpan>(nullptr);
  }

  TimeSpan* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TimeSpan>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TimeSpan& from);
  void MergeFrom(const TimeSpan& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimeSpan* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bcl.TimeSpan";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bcl_2eproto);
    return ::descriptor_table_bcl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TimeSpan_TimeSpanScale TimeSpanScale;
  static constexpr TimeSpanScale DAYS =
    TimeSpan_TimeSpanScale_DAYS;
  static constexpr TimeSpanScale HOURS =
    TimeSpan_TimeSpanScale_HOURS;
  static constexpr TimeSpanScale MINUTES =
    TimeSpan_TimeSpanScale_MINUTES;
  static constexpr TimeSpanScale SECONDS =
    TimeSpan_TimeSpanScale_SECONDS;
  static constexpr TimeSpanScale MILLISECONDS =
    TimeSpan_TimeSpanScale_MILLISECONDS;
  static constexpr TimeSpanScale TICKS =
    TimeSpan_TimeSpanScale_TICKS;
  static constexpr TimeSpanScale MINMAX =
    TimeSpan_TimeSpanScale_MINMAX;
  static inline bool TimeSpanScale_IsValid(int value) {
    return TimeSpan_TimeSpanScale_IsValid(value);
  }
  static constexpr TimeSpanScale TimeSpanScale_MIN =
    TimeSpan_TimeSpanScale_TimeSpanScale_MIN;
  static constexpr TimeSpanScale TimeSpanScale_MAX =
    TimeSpan_TimeSpanScale_TimeSpanScale_MAX;
  static constexpr int TimeSpanScale_ARRAYSIZE =
    TimeSpan_TimeSpanScale_TimeSpanScale_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  TimeSpanScale_descriptor() {
    return TimeSpan_TimeSpanScale_descriptor();
  }
  template<typename T>
  static inline const std::string& TimeSpanScale_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TimeSpanScale>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TimeSpanScale_Name.");
    return TimeSpan_TimeSpanScale_Name(enum_t_value);
  }
  static inline bool TimeSpanScale_Parse(const std::string& name,
      TimeSpanScale* value) {
    return TimeSpan_TimeSpanScale_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
    kScaleFieldNumber = 2,
  };
  // sint64 value = 1;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .bcl.TimeSpan.TimeSpanScale scale = 2;
  void clear_scale();
  ::bcl::TimeSpan_TimeSpanScale scale() const;
  void set_scale(::bcl::TimeSpan_TimeSpanScale value);
  private:
  ::bcl::TimeSpan_TimeSpanScale _internal_scale() const;
  void _internal_set_scale(::bcl::TimeSpan_TimeSpanScale value);
  public:

  // @@protoc_insertion_point(class_scope:bcl.TimeSpan)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 value_;
  int scale_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bcl_2eproto;
};
// -------------------------------------------------------------------

class DateTime :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bcl.DateTime) */ {
 public:
  DateTime();
  virtual ~DateTime();

  DateTime(const DateTime& from);
  DateTime(DateTime&& from) noexcept
    : DateTime() {
    *this = ::std::move(from);
  }

  inline DateTime& operator=(const DateTime& from) {
    CopyFrom(from);
    return *this;
  }
  inline DateTime& operator=(DateTime&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DateTime& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DateTime* internal_default_instance() {
    return reinterpret_cast<const DateTime*>(
               &_DateTime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DateTime& a, DateTime& b) {
    a.Swap(&b);
  }
  inline void Swap(DateTime* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DateTime* New() const final {
    return CreateMaybeMessage<DateTime>(nullptr);
  }

  DateTime* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DateTime>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DateTime& from);
  void MergeFrom(const DateTime& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DateTime* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bcl.DateTime";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bcl_2eproto);
    return ::descriptor_table_bcl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef DateTime_TimeSpanScale TimeSpanScale;
  static constexpr TimeSpanScale DAYS =
    DateTime_TimeSpanScale_DAYS;
  static constexpr TimeSpanScale HOURS =
    DateTime_TimeSpanScale_HOURS;
  static constexpr TimeSpanScale MINUTES =
    DateTime_TimeSpanScale_MINUTES;
  static constexpr TimeSpanScale SECONDS =
    DateTime_TimeSpanScale_SECONDS;
  static constexpr TimeSpanScale MILLISECONDS =
    DateTime_TimeSpanScale_MILLISECONDS;
  static constexpr TimeSpanScale TICKS =
    DateTime_TimeSpanScale_TICKS;
  static constexpr TimeSpanScale MINMAX =
    DateTime_TimeSpanScale_MINMAX;
  static inline bool TimeSpanScale_IsValid(int value) {
    return DateTime_TimeSpanScale_IsValid(value);
  }
  static constexpr TimeSpanScale TimeSpanScale_MIN =
    DateTime_TimeSpanScale_TimeSpanScale_MIN;
  static constexpr TimeSpanScale TimeSpanScale_MAX =
    DateTime_TimeSpanScale_TimeSpanScale_MAX;
  static constexpr int TimeSpanScale_ARRAYSIZE =
    DateTime_TimeSpanScale_TimeSpanScale_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  TimeSpanScale_descriptor() {
    return DateTime_TimeSpanScale_descriptor();
  }
  template<typename T>
  static inline const std::string& TimeSpanScale_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TimeSpanScale>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TimeSpanScale_Name.");
    return DateTime_TimeSpanScale_Name(enum_t_value);
  }
  static inline bool TimeSpanScale_Parse(const std::string& name,
      TimeSpanScale* value) {
    return DateTime_TimeSpanScale_Parse(name, value);
  }

  typedef DateTime_DateTimeKind DateTimeKind;
  static constexpr DateTimeKind UNSPECIFIED =
    DateTime_DateTimeKind_UNSPECIFIED;
  static constexpr DateTimeKind UTC =
    DateTime_DateTimeKind_UTC;
  static constexpr DateTimeKind LOCAL =
    DateTime_DateTimeKind_LOCAL;
  static inline bool DateTimeKind_IsValid(int value) {
    return DateTime_DateTimeKind_IsValid(value);
  }
  static constexpr DateTimeKind DateTimeKind_MIN =
    DateTime_DateTimeKind_DateTimeKind_MIN;
  static constexpr DateTimeKind DateTimeKind_MAX =
    DateTime_DateTimeKind_DateTimeKind_MAX;
  static constexpr int DateTimeKind_ARRAYSIZE =
    DateTime_DateTimeKind_DateTimeKind_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DateTimeKind_descriptor() {
    return DateTime_DateTimeKind_descriptor();
  }
  template<typename T>
  static inline const std::string& DateTimeKind_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DateTimeKind>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DateTimeKind_Name.");
    return DateTime_DateTimeKind_Name(enum_t_value);
  }
  static inline bool DateTimeKind_Parse(const std::string& name,
      DateTimeKind* value) {
    return DateTime_DateTimeKind_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
    kScaleFieldNumber = 2,
    kKindFieldNumber = 3,
  };
  // sint64 value = 1;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .bcl.DateTime.TimeSpanScale scale = 2;
  void clear_scale();
  ::bcl::DateTime_TimeSpanScale scale() const;
  void set_scale(::bcl::DateTime_TimeSpanScale value);
  private:
  ::bcl::DateTime_TimeSpanScale _internal_scale() const;
  void _internal_set_scale(::bcl::DateTime_TimeSpanScale value);
  public:

  // .bcl.DateTime.DateTimeKind kind = 3;
  void clear_kind();
  ::bcl::DateTime_DateTimeKind kind() const;
  void set_kind(::bcl::DateTime_DateTimeKind value);
  private:
  ::bcl::DateTime_DateTimeKind _internal_kind() const;
  void _internal_set_kind(::bcl::DateTime_DateTimeKind value);
  public:

  // @@protoc_insertion_point(class_scope:bcl.DateTime)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 value_;
  int scale_;
  int kind_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bcl_2eproto;
};
// -------------------------------------------------------------------

class NetObjectProxy :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bcl.NetObjectProxy) */ {
 public:
  NetObjectProxy();
  virtual ~NetObjectProxy();

  NetObjectProxy(const NetObjectProxy& from);
  NetObjectProxy(NetObjectProxy&& from) noexcept
    : NetObjectProxy() {
    *this = ::std::move(from);
  }

  inline NetObjectProxy& operator=(const NetObjectProxy& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetObjectProxy& operator=(NetObjectProxy&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NetObjectProxy& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetObjectProxy* internal_default_instance() {
    return reinterpret_cast<const NetObjectProxy*>(
               &_NetObjectProxy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(NetObjectProxy& a, NetObjectProxy& b) {
    a.Swap(&b);
  }
  inline void Swap(NetObjectProxy* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetObjectProxy* New() const final {
    return CreateMaybeMessage<NetObjectProxy>(nullptr);
  }

  NetObjectProxy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetObjectProxy>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NetObjectProxy& from);
  void MergeFrom(const NetObjectProxy& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetObjectProxy* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bcl.NetObjectProxy";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bcl_2eproto);
    return ::descriptor_table_bcl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeNameFieldNumber = 8,
    kPayloadFieldNumber = 10,
    kExistingObjectKeyFieldNumber = 1,
    kNewObjectKeyFieldNumber = 2,
    kExistingTypeKeyFieldNumber = 3,
    kNewTypeKeyFieldNumber = 4,
  };
  // string typeName = 8;
  void clear_typename_();
  const std::string& typename_() const;
  void set_typename_(const std::string& value);
  void set_typename_(std::string&& value);
  void set_typename_(const char* value);
  void set_typename_(const char* value, size_t size);
  std::string* mutable_typename_();
  std::string* release_typename_();
  void set_allocated_typename_(std::string* typename_);
  private:
  const std::string& _internal_typename_() const;
  void _internal_set_typename_(const std::string& value);
  std::string* _internal_mutable_typename_();
  public:

  // bytes payload = 10;
  void clear_payload();
  const std::string& payload() const;
  void set_payload(const std::string& value);
  void set_payload(std::string&& value);
  void set_payload(const char* value);
  void set_payload(const void* value, size_t size);
  std::string* mutable_payload();
  std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // int32 existingObjectKey = 1;
  void clear_existingobjectkey();
  ::PROTOBUF_NAMESPACE_ID::int32 existingobjectkey() const;
  void set_existingobjectkey(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_existingobjectkey() const;
  void _internal_set_existingobjectkey(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 newObjectKey = 2;
  void clear_newobjectkey();
  ::PROTOBUF_NAMESPACE_ID::int32 newobjectkey() const;
  void set_newobjectkey(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_newobjectkey() const;
  void _internal_set_newobjectkey(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 existingTypeKey = 3;
  void clear_existingtypekey();
  ::PROTOBUF_NAMESPACE_ID::int32 existingtypekey() const;
  void set_existingtypekey(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_existingtypekey() const;
  void _internal_set_existingtypekey(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 newTypeKey = 4;
  void clear_newtypekey();
  ::PROTOBUF_NAMESPACE_ID::int32 newtypekey() const;
  void set_newtypekey(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_newtypekey() const;
  void _internal_set_newtypekey(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:bcl.NetObjectProxy)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr typename__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  ::PROTOBUF_NAMESPACE_ID::int32 existingobjectkey_;
  ::PROTOBUF_NAMESPACE_ID::int32 newobjectkey_;
  ::PROTOBUF_NAMESPACE_ID::int32 existingtypekey_;
  ::PROTOBUF_NAMESPACE_ID::int32 newtypekey_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bcl_2eproto;
};
// -------------------------------------------------------------------

class Guid :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bcl.Guid) */ {
 public:
  Guid();
  virtual ~Guid();

  Guid(const Guid& from);
  Guid(Guid&& from) noexcept
    : Guid() {
    *this = ::std::move(from);
  }

  inline Guid& operator=(const Guid& from) {
    CopyFrom(from);
    return *this;
  }
  inline Guid& operator=(Guid&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Guid& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Guid* internal_default_instance() {
    return reinterpret_cast<const Guid*>(
               &_Guid_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Guid& a, Guid& b) {
    a.Swap(&b);
  }
  inline void Swap(Guid* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Guid* New() const final {
    return CreateMaybeMessage<Guid>(nullptr);
  }

  Guid* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Guid>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Guid& from);
  void MergeFrom(const Guid& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Guid* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bcl.Guid";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bcl_2eproto);
    return ::descriptor_table_bcl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoFieldNumber = 1,
    kHiFieldNumber = 2,
  };
  // fixed64 lo = 1;
  void clear_lo();
  ::PROTOBUF_NAMESPACE_ID::uint64 lo() const;
  void set_lo(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_lo() const;
  void _internal_set_lo(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // fixed64 hi = 2;
  void clear_hi();
  ::PROTOBUF_NAMESPACE_ID::uint64 hi() const;
  void set_hi(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_hi() const;
  void _internal_set_hi(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bcl.Guid)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 lo_;
  ::PROTOBUF_NAMESPACE_ID::uint64 hi_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bcl_2eproto;
};
// -------------------------------------------------------------------

class Decimal :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bcl.Decimal) */ {
 public:
  Decimal();
  virtual ~Decimal();

  Decimal(const Decimal& from);
  Decimal(Decimal&& from) noexcept
    : Decimal() {
    *this = ::std::move(from);
  }

  inline Decimal& operator=(const Decimal& from) {
    CopyFrom(from);
    return *this;
  }
  inline Decimal& operator=(Decimal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Decimal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Decimal* internal_default_instance() {
    return reinterpret_cast<const Decimal*>(
               &_Decimal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Decimal& a, Decimal& b) {
    a.Swap(&b);
  }
  inline void Swap(Decimal* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Decimal* New() const final {
    return CreateMaybeMessage<Decimal>(nullptr);
  }

  Decimal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Decimal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Decimal& from);
  void MergeFrom(const Decimal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Decimal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bcl.Decimal";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bcl_2eproto);
    return ::descriptor_table_bcl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoFieldNumber = 1,
    kHiFieldNumber = 2,
    kSignScaleFieldNumber = 3,
  };
  // uint64 lo = 1;
  void clear_lo();
  ::PROTOBUF_NAMESPACE_ID::uint64 lo() const;
  void set_lo(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_lo() const;
  void _internal_set_lo(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 hi = 2;
  void clear_hi();
  ::PROTOBUF_NAMESPACE_ID::uint32 hi() const;
  void set_hi(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_hi() const;
  void _internal_set_hi(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 signScale = 3;
  void clear_signscale();
  ::PROTOBUF_NAMESPACE_ID::uint32 signscale() const;
  void set_signscale(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_signscale() const;
  void _internal_set_signscale(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:bcl.Decimal)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 lo_;
  ::PROTOBUF_NAMESPACE_ID::uint32 hi_;
  ::PROTOBUF_NAMESPACE_ID::uint32 signscale_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bcl_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TimeSpan

// sint64 value = 1;
inline void TimeSpan::clear_value() {
  value_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TimeSpan::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TimeSpan::value() const {
  // @@protoc_insertion_point(field_get:bcl.TimeSpan.value)
  return _internal_value();
}
inline void TimeSpan::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  value_ = value;
}
inline void TimeSpan::set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:bcl.TimeSpan.value)
}

// .bcl.TimeSpan.TimeSpanScale scale = 2;
inline void TimeSpan::clear_scale() {
  scale_ = 0;
}
inline ::bcl::TimeSpan_TimeSpanScale TimeSpan::_internal_scale() const {
  return static_cast< ::bcl::TimeSpan_TimeSpanScale >(scale_);
}
inline ::bcl::TimeSpan_TimeSpanScale TimeSpan::scale() const {
  // @@protoc_insertion_point(field_get:bcl.TimeSpan.scale)
  return _internal_scale();
}
inline void TimeSpan::_internal_set_scale(::bcl::TimeSpan_TimeSpanScale value) {
  
  scale_ = value;
}
inline void TimeSpan::set_scale(::bcl::TimeSpan_TimeSpanScale value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:bcl.TimeSpan.scale)
}

// -------------------------------------------------------------------

// DateTime

// sint64 value = 1;
inline void DateTime::clear_value() {
  value_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DateTime::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DateTime::value() const {
  // @@protoc_insertion_point(field_get:bcl.DateTime.value)
  return _internal_value();
}
inline void DateTime::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  value_ = value;
}
inline void DateTime::set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:bcl.DateTime.value)
}

// .bcl.DateTime.TimeSpanScale scale = 2;
inline void DateTime::clear_scale() {
  scale_ = 0;
}
inline ::bcl::DateTime_TimeSpanScale DateTime::_internal_scale() const {
  return static_cast< ::bcl::DateTime_TimeSpanScale >(scale_);
}
inline ::bcl::DateTime_TimeSpanScale DateTime::scale() const {
  // @@protoc_insertion_point(field_get:bcl.DateTime.scale)
  return _internal_scale();
}
inline void DateTime::_internal_set_scale(::bcl::DateTime_TimeSpanScale value) {
  
  scale_ = value;
}
inline void DateTime::set_scale(::bcl::DateTime_TimeSpanScale value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:bcl.DateTime.scale)
}

// .bcl.DateTime.DateTimeKind kind = 3;
inline void DateTime::clear_kind() {
  kind_ = 0;
}
inline ::bcl::DateTime_DateTimeKind DateTime::_internal_kind() const {
  return static_cast< ::bcl::DateTime_DateTimeKind >(kind_);
}
inline ::bcl::DateTime_DateTimeKind DateTime::kind() const {
  // @@protoc_insertion_point(field_get:bcl.DateTime.kind)
  return _internal_kind();
}
inline void DateTime::_internal_set_kind(::bcl::DateTime_DateTimeKind value) {
  
  kind_ = value;
}
inline void DateTime::set_kind(::bcl::DateTime_DateTimeKind value) {
  _internal_set_kind(value);
  // @@protoc_insertion_point(field_set:bcl.DateTime.kind)
}

// -------------------------------------------------------------------

// NetObjectProxy

// int32 existingObjectKey = 1;
inline void NetObjectProxy::clear_existingobjectkey() {
  existingobjectkey_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetObjectProxy::_internal_existingobjectkey() const {
  return existingobjectkey_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetObjectProxy::existingobjectkey() const {
  // @@protoc_insertion_point(field_get:bcl.NetObjectProxy.existingObjectKey)
  return _internal_existingobjectkey();
}
inline void NetObjectProxy::_internal_set_existingobjectkey(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  existingobjectkey_ = value;
}
inline void NetObjectProxy::set_existingobjectkey(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_existingobjectkey(value);
  // @@protoc_insertion_point(field_set:bcl.NetObjectProxy.existingObjectKey)
}

// int32 newObjectKey = 2;
inline void NetObjectProxy::clear_newobjectkey() {
  newobjectkey_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetObjectProxy::_internal_newobjectkey() const {
  return newobjectkey_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetObjectProxy::newobjectkey() const {
  // @@protoc_insertion_point(field_get:bcl.NetObjectProxy.newObjectKey)
  return _internal_newobjectkey();
}
inline void NetObjectProxy::_internal_set_newobjectkey(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  newobjectkey_ = value;
}
inline void NetObjectProxy::set_newobjectkey(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_newobjectkey(value);
  // @@protoc_insertion_point(field_set:bcl.NetObjectProxy.newObjectKey)
}

// int32 existingTypeKey = 3;
inline void NetObjectProxy::clear_existingtypekey() {
  existingtypekey_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetObjectProxy::_internal_existingtypekey() const {
  return existingtypekey_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetObjectProxy::existingtypekey() const {
  // @@protoc_insertion_point(field_get:bcl.NetObjectProxy.existingTypeKey)
  return _internal_existingtypekey();
}
inline void NetObjectProxy::_internal_set_existingtypekey(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  existingtypekey_ = value;
}
inline void NetObjectProxy::set_existingtypekey(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_existingtypekey(value);
  // @@protoc_insertion_point(field_set:bcl.NetObjectProxy.existingTypeKey)
}

// int32 newTypeKey = 4;
inline void NetObjectProxy::clear_newtypekey() {
  newtypekey_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetObjectProxy::_internal_newtypekey() const {
  return newtypekey_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetObjectProxy::newtypekey() const {
  // @@protoc_insertion_point(field_get:bcl.NetObjectProxy.newTypeKey)
  return _internal_newtypekey();
}
inline void NetObjectProxy::_internal_set_newtypekey(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  newtypekey_ = value;
}
inline void NetObjectProxy::set_newtypekey(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_newtypekey(value);
  // @@protoc_insertion_point(field_set:bcl.NetObjectProxy.newTypeKey)
}

// string typeName = 8;
inline void NetObjectProxy::clear_typename_() {
  typename__.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NetObjectProxy::typename_() const {
  // @@protoc_insertion_point(field_get:bcl.NetObjectProxy.typeName)
  return _internal_typename_();
}
inline void NetObjectProxy::set_typename_(const std::string& value) {
  _internal_set_typename_(value);
  // @@protoc_insertion_point(field_set:bcl.NetObjectProxy.typeName)
}
inline std::string* NetObjectProxy::mutable_typename_() {
  // @@protoc_insertion_point(field_mutable:bcl.NetObjectProxy.typeName)
  return _internal_mutable_typename_();
}
inline const std::string& NetObjectProxy::_internal_typename_() const {
  return typename__.GetNoArena();
}
inline void NetObjectProxy::_internal_set_typename_(const std::string& value) {
  
  typename__.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void NetObjectProxy::set_typename_(std::string&& value) {
  
  typename__.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bcl.NetObjectProxy.typeName)
}
inline void NetObjectProxy::set_typename_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  typename__.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bcl.NetObjectProxy.typeName)
}
inline void NetObjectProxy::set_typename_(const char* value, size_t size) {
  
  typename__.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bcl.NetObjectProxy.typeName)
}
inline std::string* NetObjectProxy::_internal_mutable_typename_() {
  
  return typename__.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NetObjectProxy::release_typename_() {
  // @@protoc_insertion_point(field_release:bcl.NetObjectProxy.typeName)
  
  return typename__.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NetObjectProxy::set_allocated_typename_(std::string* typename_) {
  if (typename_ != nullptr) {
    
  } else {
    
  }
  typename__.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), typename_);
  // @@protoc_insertion_point(field_set_allocated:bcl.NetObjectProxy.typeName)
}

// bytes payload = 10;
inline void NetObjectProxy::clear_payload() {
  payload_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NetObjectProxy::payload() const {
  // @@protoc_insertion_point(field_get:bcl.NetObjectProxy.payload)
  return _internal_payload();
}
inline void NetObjectProxy::set_payload(const std::string& value) {
  _internal_set_payload(value);
  // @@protoc_insertion_point(field_set:bcl.NetObjectProxy.payload)
}
inline std::string* NetObjectProxy::mutable_payload() {
  // @@protoc_insertion_point(field_mutable:bcl.NetObjectProxy.payload)
  return _internal_mutable_payload();
}
inline const std::string& NetObjectProxy::_internal_payload() const {
  return payload_.GetNoArena();
}
inline void NetObjectProxy::_internal_set_payload(const std::string& value) {
  
  payload_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void NetObjectProxy::set_payload(std::string&& value) {
  
  payload_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bcl.NetObjectProxy.payload)
}
inline void NetObjectProxy::set_payload(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payload_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bcl.NetObjectProxy.payload)
}
inline void NetObjectProxy::set_payload(const void* value, size_t size) {
  
  payload_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bcl.NetObjectProxy.payload)
}
inline std::string* NetObjectProxy::_internal_mutable_payload() {
  
  return payload_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NetObjectProxy::release_payload() {
  // @@protoc_insertion_point(field_release:bcl.NetObjectProxy.payload)
  
  return payload_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NetObjectProxy::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  payload_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:bcl.NetObjectProxy.payload)
}

// -------------------------------------------------------------------

// Guid

// fixed64 lo = 1;
inline void Guid::clear_lo() {
  lo_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Guid::_internal_lo() const {
  return lo_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Guid::lo() const {
  // @@protoc_insertion_point(field_get:bcl.Guid.lo)
  return _internal_lo();
}
inline void Guid::_internal_set_lo(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  lo_ = value;
}
inline void Guid::set_lo(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_lo(value);
  // @@protoc_insertion_point(field_set:bcl.Guid.lo)
}

// fixed64 hi = 2;
inline void Guid::clear_hi() {
  hi_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Guid::_internal_hi() const {
  return hi_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Guid::hi() const {
  // @@protoc_insertion_point(field_get:bcl.Guid.hi)
  return _internal_hi();
}
inline void Guid::_internal_set_hi(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  hi_ = value;
}
inline void Guid::set_hi(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_hi(value);
  // @@protoc_insertion_point(field_set:bcl.Guid.hi)
}

// -------------------------------------------------------------------

// Decimal

// uint64 lo = 1;
inline void Decimal::clear_lo() {
  lo_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Decimal::_internal_lo() const {
  return lo_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Decimal::lo() const {
  // @@protoc_insertion_point(field_get:bcl.Decimal.lo)
  return _internal_lo();
}
inline void Decimal::_internal_set_lo(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  lo_ = value;
}
inline void Decimal::set_lo(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_lo(value);
  // @@protoc_insertion_point(field_set:bcl.Decimal.lo)
}

// uint32 hi = 2;
inline void Decimal::clear_hi() {
  hi_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Decimal::_internal_hi() const {
  return hi_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Decimal::hi() const {
  // @@protoc_insertion_point(field_get:bcl.Decimal.hi)
  return _internal_hi();
}
inline void Decimal::_internal_set_hi(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  hi_ = value;
}
inline void Decimal::set_hi(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_hi(value);
  // @@protoc_insertion_point(field_set:bcl.Decimal.hi)
}

// uint32 signScale = 3;
inline void Decimal::clear_signscale() {
  signscale_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Decimal::_internal_signscale() const {
  return signscale_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Decimal::signscale() const {
  // @@protoc_insertion_point(field_get:bcl.Decimal.signScale)
  return _internal_signscale();
}
inline void Decimal::_internal_set_signscale(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  signscale_ = value;
}
inline void Decimal::set_signscale(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_signscale(value);
  // @@protoc_insertion_point(field_set:bcl.Decimal.signScale)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace bcl

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::bcl::TimeSpan_TimeSpanScale> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bcl::TimeSpan_TimeSpanScale>() {
  return ::bcl::TimeSpan_TimeSpanScale_descriptor();
}
template <> struct is_proto_enum< ::bcl::DateTime_TimeSpanScale> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bcl::DateTime_TimeSpanScale>() {
  return ::bcl::DateTime_TimeSpanScale_descriptor();
}
template <> struct is_proto_enum< ::bcl::DateTime_DateTimeKind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bcl::DateTime_DateTimeKind>() {
  return ::bcl::DateTime_DateTimeKind_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bcl_2eproto
