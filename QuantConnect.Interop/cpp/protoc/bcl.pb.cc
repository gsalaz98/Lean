// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bcl.proto

#include "bcl.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace bcl {
class TimeSpanDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TimeSpan> _instance;
} _TimeSpan_default_instance_;
class DateTimeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DateTime> _instance;
} _DateTime_default_instance_;
class NetObjectProxyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NetObjectProxy> _instance;
} _NetObjectProxy_default_instance_;
class GuidDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Guid> _instance;
} _Guid_default_instance_;
class DecimalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Decimal> _instance;
} _Decimal_default_instance_;
}  // namespace bcl
static void InitDefaultsscc_info_DateTime_bcl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bcl::_DateTime_default_instance_;
    new (ptr) ::bcl::DateTime();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bcl::DateTime::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DateTime_bcl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DateTime_bcl_2eproto}, {}};

static void InitDefaultsscc_info_Decimal_bcl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bcl::_Decimal_default_instance_;
    new (ptr) ::bcl::Decimal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bcl::Decimal::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Decimal_bcl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Decimal_bcl_2eproto}, {}};

static void InitDefaultsscc_info_Guid_bcl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bcl::_Guid_default_instance_;
    new (ptr) ::bcl::Guid();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bcl::Guid::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Guid_bcl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Guid_bcl_2eproto}, {}};

static void InitDefaultsscc_info_NetObjectProxy_bcl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bcl::_NetObjectProxy_default_instance_;
    new (ptr) ::bcl::NetObjectProxy();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bcl::NetObjectProxy::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NetObjectProxy_bcl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NetObjectProxy_bcl_2eproto}, {}};

static void InitDefaultsscc_info_TimeSpan_bcl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bcl::_TimeSpan_default_instance_;
    new (ptr) ::bcl::TimeSpan();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bcl::TimeSpan::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TimeSpan_bcl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TimeSpan_bcl_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_bcl_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_bcl_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_bcl_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_bcl_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bcl::TimeSpan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bcl::TimeSpan, value_),
  PROTOBUF_FIELD_OFFSET(::bcl::TimeSpan, scale_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bcl::DateTime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bcl::DateTime, value_),
  PROTOBUF_FIELD_OFFSET(::bcl::DateTime, scale_),
  PROTOBUF_FIELD_OFFSET(::bcl::DateTime, kind_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bcl::NetObjectProxy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bcl::NetObjectProxy, existingobjectkey_),
  PROTOBUF_FIELD_OFFSET(::bcl::NetObjectProxy, newobjectkey_),
  PROTOBUF_FIELD_OFFSET(::bcl::NetObjectProxy, existingtypekey_),
  PROTOBUF_FIELD_OFFSET(::bcl::NetObjectProxy, newtypekey_),
  PROTOBUF_FIELD_OFFSET(::bcl::NetObjectProxy, typename__),
  PROTOBUF_FIELD_OFFSET(::bcl::NetObjectProxy, payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bcl::Guid, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bcl::Guid, lo_),
  PROTOBUF_FIELD_OFFSET(::bcl::Guid, hi_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bcl::Decimal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bcl::Decimal, lo_),
  PROTOBUF_FIELD_OFFSET(::bcl::Decimal, hi_),
  PROTOBUF_FIELD_OFFSET(::bcl::Decimal, signscale_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::bcl::TimeSpan)},
  { 7, -1, sizeof(::bcl::DateTime)},
  { 15, -1, sizeof(::bcl::NetObjectProxy)},
  { 26, -1, sizeof(::bcl::Guid)},
  { 33, -1, sizeof(::bcl::Decimal)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bcl::_TimeSpan_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bcl::_DateTime_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bcl::_NetObjectProxy_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bcl::_Guid_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bcl::_Decimal_default_instance_),
};

const char descriptor_table_protodef_bcl_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tbcl.proto\022\003bcl\"\256\001\n\010TimeSpan\022\r\n\005value\030\001"
  " \001(\022\022*\n\005scale\030\002 \001(\0162\033.bcl.TimeSpan.TimeS"
  "panScale\"g\n\rTimeSpanScale\022\010\n\004DAYS\020\000\022\t\n\005H"
  "OURS\020\001\022\013\n\007MINUTES\020\002\022\013\n\007SECONDS\020\003\022\020\n\014MILL"
  "ISECONDS\020\004\022\t\n\005TICKS\020\005\022\n\n\006MINMAX\020\017\"\215\002\n\010Da"
  "teTime\022\r\n\005value\030\001 \001(\022\022*\n\005scale\030\002 \001(\0162\033.b"
  "cl.DateTime.TimeSpanScale\022(\n\004kind\030\003 \001(\0162"
  "\032.bcl.DateTime.DateTimeKind\"g\n\rTimeSpanS"
  "cale\022\010\n\004DAYS\020\000\022\t\n\005HOURS\020\001\022\013\n\007MINUTES\020\002\022\013"
  "\n\007SECONDS\020\003\022\020\n\014MILLISECONDS\020\004\022\t\n\005TICKS\020\005"
  "\022\n\n\006MINMAX\020\017\"3\n\014DateTimeKind\022\017\n\013UNSPECIF"
  "IED\020\000\022\007\n\003UTC\020\001\022\t\n\005LOCAL\020\002\"\221\001\n\016NetObjectP"
  "roxy\022\031\n\021existingObjectKey\030\001 \001(\005\022\024\n\014newOb"
  "jectKey\030\002 \001(\005\022\027\n\017existingTypeKey\030\003 \001(\005\022\022"
  "\n\nnewTypeKey\030\004 \001(\005\022\020\n\010typeName\030\010 \001(\t\022\017\n\007"
  "payload\030\n \001(\014\"\036\n\004Guid\022\n\n\002lo\030\001 \001(\006\022\n\n\002hi\030"
  "\002 \001(\006\"4\n\007Decimal\022\n\n\002lo\030\001 \001(\004\022\n\n\002hi\030\002 \001(\r"
  "\022\021\n\tsignScale\030\003 \001(\rB\017\252\002\014ProtoBuf.Bclb\006pr"
  "oto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_bcl_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_bcl_2eproto_sccs[5] = {
  &scc_info_DateTime_bcl_2eproto.base,
  &scc_info_Decimal_bcl_2eproto.base,
  &scc_info_Guid_bcl_2eproto.base,
  &scc_info_NetObjectProxy_bcl_2eproto.base,
  &scc_info_TimeSpan_bcl_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_bcl_2eproto_once;
static bool descriptor_table_bcl_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bcl_2eproto = {
  &descriptor_table_bcl_2eproto_initialized, descriptor_table_protodef_bcl_2eproto, "bcl.proto", 724,
  &descriptor_table_bcl_2eproto_once, descriptor_table_bcl_2eproto_sccs, descriptor_table_bcl_2eproto_deps, 5, 0,
  schemas, file_default_instances, TableStruct_bcl_2eproto::offsets,
  file_level_metadata_bcl_2eproto, 5, file_level_enum_descriptors_bcl_2eproto, file_level_service_descriptors_bcl_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_bcl_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_bcl_2eproto), true);
namespace bcl {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TimeSpan_TimeSpanScale_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bcl_2eproto);
  return file_level_enum_descriptors_bcl_2eproto[0];
}
bool TimeSpan_TimeSpanScale_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 15:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TimeSpan_TimeSpanScale TimeSpan::DAYS;
constexpr TimeSpan_TimeSpanScale TimeSpan::HOURS;
constexpr TimeSpan_TimeSpanScale TimeSpan::MINUTES;
constexpr TimeSpan_TimeSpanScale TimeSpan::SECONDS;
constexpr TimeSpan_TimeSpanScale TimeSpan::MILLISECONDS;
constexpr TimeSpan_TimeSpanScale TimeSpan::TICKS;
constexpr TimeSpan_TimeSpanScale TimeSpan::MINMAX;
constexpr TimeSpan_TimeSpanScale TimeSpan::TimeSpanScale_MIN;
constexpr TimeSpan_TimeSpanScale TimeSpan::TimeSpanScale_MAX;
constexpr int TimeSpan::TimeSpanScale_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DateTime_TimeSpanScale_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bcl_2eproto);
  return file_level_enum_descriptors_bcl_2eproto[1];
}
bool DateTime_TimeSpanScale_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 15:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DateTime_TimeSpanScale DateTime::DAYS;
constexpr DateTime_TimeSpanScale DateTime::HOURS;
constexpr DateTime_TimeSpanScale DateTime::MINUTES;
constexpr DateTime_TimeSpanScale DateTime::SECONDS;
constexpr DateTime_TimeSpanScale DateTime::MILLISECONDS;
constexpr DateTime_TimeSpanScale DateTime::TICKS;
constexpr DateTime_TimeSpanScale DateTime::MINMAX;
constexpr DateTime_TimeSpanScale DateTime::TimeSpanScale_MIN;
constexpr DateTime_TimeSpanScale DateTime::TimeSpanScale_MAX;
constexpr int DateTime::TimeSpanScale_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DateTime_DateTimeKind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bcl_2eproto);
  return file_level_enum_descriptors_bcl_2eproto[2];
}
bool DateTime_DateTimeKind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DateTime_DateTimeKind DateTime::UNSPECIFIED;
constexpr DateTime_DateTimeKind DateTime::UTC;
constexpr DateTime_DateTimeKind DateTime::LOCAL;
constexpr DateTime_DateTimeKind DateTime::DateTimeKind_MIN;
constexpr DateTime_DateTimeKind DateTime::DateTimeKind_MAX;
constexpr int DateTime::DateTimeKind_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void TimeSpan::InitAsDefaultInstance() {
}
class TimeSpan::_Internal {
 public:
};

TimeSpan::TimeSpan()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bcl.TimeSpan)
}
TimeSpan::TimeSpan(const TimeSpan& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&scale_) -
    reinterpret_cast<char*>(&value_)) + sizeof(scale_));
  // @@protoc_insertion_point(copy_constructor:bcl.TimeSpan)
}

void TimeSpan::SharedCtor() {
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scale_) -
      reinterpret_cast<char*>(&value_)) + sizeof(scale_));
}

TimeSpan::~TimeSpan() {
  // @@protoc_insertion_point(destructor:bcl.TimeSpan)
  SharedDtor();
}

void TimeSpan::SharedDtor() {
}

void TimeSpan::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TimeSpan& TimeSpan::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TimeSpan_bcl_2eproto.base);
  return *internal_default_instance();
}


void TimeSpan::Clear() {
// @@protoc_insertion_point(message_clear_start:bcl.TimeSpan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scale_) -
      reinterpret_cast<char*>(&value_)) + sizeof(scale_));
  _internal_metadata_.Clear();
}

const char* TimeSpan::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // sint64 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bcl.TimeSpan.TimeSpanScale scale = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_scale(static_cast<::bcl::TimeSpan_TimeSpanScale>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TimeSpan::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bcl.TimeSpan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint64 value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(1, this->_internal_value(), target);
  }

  // .bcl.TimeSpan.TimeSpanScale scale = 2;
  if (this->scale() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_scale(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bcl.TimeSpan)
  return target;
}

size_t TimeSpan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bcl.TimeSpan)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint64 value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64Size(
        this->_internal_value());
  }

  // .bcl.TimeSpan.TimeSpanScale scale = 2;
  if (this->scale() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_scale());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimeSpan::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bcl.TimeSpan)
  GOOGLE_DCHECK_NE(&from, this);
  const TimeSpan* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TimeSpan>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bcl.TimeSpan)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bcl.TimeSpan)
    MergeFrom(*source);
  }
}

void TimeSpan::MergeFrom(const TimeSpan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bcl.TimeSpan)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.scale() != 0) {
    _internal_set_scale(from._internal_scale());
  }
}

void TimeSpan::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bcl.TimeSpan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeSpan::CopyFrom(const TimeSpan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bcl.TimeSpan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeSpan::IsInitialized() const {
  return true;
}

void TimeSpan::InternalSwap(TimeSpan* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(value_, other->value_);
  swap(scale_, other->scale_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TimeSpan::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DateTime::InitAsDefaultInstance() {
}
class DateTime::_Internal {
 public:
};

DateTime::DateTime()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bcl.DateTime)
}
DateTime::DateTime(const DateTime& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&kind_) -
    reinterpret_cast<char*>(&value_)) + sizeof(kind_));
  // @@protoc_insertion_point(copy_constructor:bcl.DateTime)
}

void DateTime::SharedCtor() {
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kind_) -
      reinterpret_cast<char*>(&value_)) + sizeof(kind_));
}

DateTime::~DateTime() {
  // @@protoc_insertion_point(destructor:bcl.DateTime)
  SharedDtor();
}

void DateTime::SharedDtor() {
}

void DateTime::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DateTime& DateTime::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DateTime_bcl_2eproto.base);
  return *internal_default_instance();
}


void DateTime::Clear() {
// @@protoc_insertion_point(message_clear_start:bcl.DateTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kind_) -
      reinterpret_cast<char*>(&value_)) + sizeof(kind_));
  _internal_metadata_.Clear();
}

const char* DateTime::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // sint64 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bcl.DateTime.TimeSpanScale scale = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_scale(static_cast<::bcl::DateTime_TimeSpanScale>(val));
        } else goto handle_unusual;
        continue;
      // .bcl.DateTime.DateTimeKind kind = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_kind(static_cast<::bcl::DateTime_DateTimeKind>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DateTime::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bcl.DateTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint64 value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(1, this->_internal_value(), target);
  }

  // .bcl.DateTime.TimeSpanScale scale = 2;
  if (this->scale() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_scale(), target);
  }

  // .bcl.DateTime.DateTimeKind kind = 3;
  if (this->kind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_kind(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bcl.DateTime)
  return target;
}

size_t DateTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bcl.DateTime)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint64 value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64Size(
        this->_internal_value());
  }

  // .bcl.DateTime.TimeSpanScale scale = 2;
  if (this->scale() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_scale());
  }

  // .bcl.DateTime.DateTimeKind kind = 3;
  if (this->kind() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_kind());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DateTime::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bcl.DateTime)
  GOOGLE_DCHECK_NE(&from, this);
  const DateTime* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DateTime>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bcl.DateTime)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bcl.DateTime)
    MergeFrom(*source);
  }
}

void DateTime::MergeFrom(const DateTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bcl.DateTime)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.scale() != 0) {
    _internal_set_scale(from._internal_scale());
  }
  if (from.kind() != 0) {
    _internal_set_kind(from._internal_kind());
  }
}

void DateTime::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bcl.DateTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DateTime::CopyFrom(const DateTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bcl.DateTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DateTime::IsInitialized() const {
  return true;
}

void DateTime::InternalSwap(DateTime* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(value_, other->value_);
  swap(scale_, other->scale_);
  swap(kind_, other->kind_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DateTime::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NetObjectProxy::InitAsDefaultInstance() {
}
class NetObjectProxy::_Internal {
 public:
};

NetObjectProxy::NetObjectProxy()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bcl.NetObjectProxy)
}
NetObjectProxy::NetObjectProxy(const NetObjectProxy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  typename__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_typename_().empty()) {
    typename__.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.typename__);
  }
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payload().empty()) {
    payload_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payload_);
  }
  ::memcpy(&existingobjectkey_, &from.existingobjectkey_,
    static_cast<size_t>(reinterpret_cast<char*>(&newtypekey_) -
    reinterpret_cast<char*>(&existingobjectkey_)) + sizeof(newtypekey_));
  // @@protoc_insertion_point(copy_constructor:bcl.NetObjectProxy)
}

void NetObjectProxy::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NetObjectProxy_bcl_2eproto.base);
  typename__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&existingobjectkey_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&newtypekey_) -
      reinterpret_cast<char*>(&existingobjectkey_)) + sizeof(newtypekey_));
}

NetObjectProxy::~NetObjectProxy() {
  // @@protoc_insertion_point(destructor:bcl.NetObjectProxy)
  SharedDtor();
}

void NetObjectProxy::SharedDtor() {
  typename__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payload_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NetObjectProxy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetObjectProxy& NetObjectProxy::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NetObjectProxy_bcl_2eproto.base);
  return *internal_default_instance();
}


void NetObjectProxy::Clear() {
// @@protoc_insertion_point(message_clear_start:bcl.NetObjectProxy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  typename__.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payload_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&existingobjectkey_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&newtypekey_) -
      reinterpret_cast<char*>(&existingobjectkey_)) + sizeof(newtypekey_));
  _internal_metadata_.Clear();
}

const char* NetObjectProxy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 existingObjectKey = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          existingobjectkey_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 newObjectKey = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          newobjectkey_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 existingTypeKey = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          existingtypekey_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 newTypeKey = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          newtypekey_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string typeName = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_typename_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bcl.NetObjectProxy.typeName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes payload = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_payload();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NetObjectProxy::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bcl.NetObjectProxy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 existingObjectKey = 1;
  if (this->existingobjectkey() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_existingobjectkey(), target);
  }

  // int32 newObjectKey = 2;
  if (this->newobjectkey() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_newobjectkey(), target);
  }

  // int32 existingTypeKey = 3;
  if (this->existingtypekey() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_existingtypekey(), target);
  }

  // int32 newTypeKey = 4;
  if (this->newtypekey() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_newtypekey(), target);
  }

  // string typeName = 8;
  if (this->typename_().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_typename_().data(), static_cast<int>(this->_internal_typename_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bcl.NetObjectProxy.typeName");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_typename_(), target);
  }

  // bytes payload = 10;
  if (this->payload().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_payload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bcl.NetObjectProxy)
  return target;
}

size_t NetObjectProxy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bcl.NetObjectProxy)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string typeName = 8;
  if (this->typename_().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_typename_());
  }

  // bytes payload = 10;
  if (this->payload().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payload());
  }

  // int32 existingObjectKey = 1;
  if (this->existingobjectkey() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_existingobjectkey());
  }

  // int32 newObjectKey = 2;
  if (this->newobjectkey() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_newobjectkey());
  }

  // int32 existingTypeKey = 3;
  if (this->existingtypekey() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_existingtypekey());
  }

  // int32 newTypeKey = 4;
  if (this->newtypekey() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_newtypekey());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetObjectProxy::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bcl.NetObjectProxy)
  GOOGLE_DCHECK_NE(&from, this);
  const NetObjectProxy* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NetObjectProxy>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bcl.NetObjectProxy)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bcl.NetObjectProxy)
    MergeFrom(*source);
  }
}

void NetObjectProxy::MergeFrom(const NetObjectProxy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bcl.NetObjectProxy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.typename_().size() > 0) {

    typename__.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.typename__);
  }
  if (from.payload().size() > 0) {

    payload_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payload_);
  }
  if (from.existingobjectkey() != 0) {
    _internal_set_existingobjectkey(from._internal_existingobjectkey());
  }
  if (from.newobjectkey() != 0) {
    _internal_set_newobjectkey(from._internal_newobjectkey());
  }
  if (from.existingtypekey() != 0) {
    _internal_set_existingtypekey(from._internal_existingtypekey());
  }
  if (from.newtypekey() != 0) {
    _internal_set_newtypekey(from._internal_newtypekey());
  }
}

void NetObjectProxy::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bcl.NetObjectProxy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetObjectProxy::CopyFrom(const NetObjectProxy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bcl.NetObjectProxy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetObjectProxy::IsInitialized() const {
  return true;
}

void NetObjectProxy::InternalSwap(NetObjectProxy* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  typename__.Swap(&other->typename__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  payload_.Swap(&other->payload_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(existingobjectkey_, other->existingobjectkey_);
  swap(newobjectkey_, other->newobjectkey_);
  swap(existingtypekey_, other->existingtypekey_);
  swap(newtypekey_, other->newtypekey_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NetObjectProxy::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Guid::InitAsDefaultInstance() {
}
class Guid::_Internal {
 public:
};

Guid::Guid()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bcl.Guid)
}
Guid::Guid(const Guid& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lo_, &from.lo_,
    static_cast<size_t>(reinterpret_cast<char*>(&hi_) -
    reinterpret_cast<char*>(&lo_)) + sizeof(hi_));
  // @@protoc_insertion_point(copy_constructor:bcl.Guid)
}

void Guid::SharedCtor() {
  ::memset(&lo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hi_) -
      reinterpret_cast<char*>(&lo_)) + sizeof(hi_));
}

Guid::~Guid() {
  // @@protoc_insertion_point(destructor:bcl.Guid)
  SharedDtor();
}

void Guid::SharedDtor() {
}

void Guid::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Guid& Guid::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Guid_bcl_2eproto.base);
  return *internal_default_instance();
}


void Guid::Clear() {
// @@protoc_insertion_point(message_clear_start:bcl.Guid)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&lo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hi_) -
      reinterpret_cast<char*>(&lo_)) + sizeof(hi_));
  _internal_metadata_.Clear();
}

const char* Guid::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // fixed64 lo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          lo_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // fixed64 hi = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          hi_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Guid::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bcl.Guid)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 lo = 1;
  if (this->lo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_lo(), target);
  }

  // fixed64 hi = 2;
  if (this->hi() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_hi(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bcl.Guid)
  return target;
}

size_t Guid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bcl.Guid)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // fixed64 lo = 1;
  if (this->lo() != 0) {
    total_size += 1 + 8;
  }

  // fixed64 hi = 2;
  if (this->hi() != 0) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Guid::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bcl.Guid)
  GOOGLE_DCHECK_NE(&from, this);
  const Guid* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Guid>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bcl.Guid)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bcl.Guid)
    MergeFrom(*source);
  }
}

void Guid::MergeFrom(const Guid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bcl.Guid)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.lo() != 0) {
    _internal_set_lo(from._internal_lo());
  }
  if (from.hi() != 0) {
    _internal_set_hi(from._internal_hi());
  }
}

void Guid::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bcl.Guid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Guid::CopyFrom(const Guid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bcl.Guid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Guid::IsInitialized() const {
  return true;
}

void Guid::InternalSwap(Guid* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(lo_, other->lo_);
  swap(hi_, other->hi_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Guid::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Decimal::InitAsDefaultInstance() {
}
class Decimal::_Internal {
 public:
};

Decimal::Decimal()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bcl.Decimal)
}
Decimal::Decimal(const Decimal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lo_, &from.lo_,
    static_cast<size_t>(reinterpret_cast<char*>(&signscale_) -
    reinterpret_cast<char*>(&lo_)) + sizeof(signscale_));
  // @@protoc_insertion_point(copy_constructor:bcl.Decimal)
}

void Decimal::SharedCtor() {
  ::memset(&lo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&signscale_) -
      reinterpret_cast<char*>(&lo_)) + sizeof(signscale_));
}

Decimal::~Decimal() {
  // @@protoc_insertion_point(destructor:bcl.Decimal)
  SharedDtor();
}

void Decimal::SharedDtor() {
}

void Decimal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Decimal& Decimal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Decimal_bcl_2eproto.base);
  return *internal_default_instance();
}


void Decimal::Clear() {
// @@protoc_insertion_point(message_clear_start:bcl.Decimal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&lo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&signscale_) -
      reinterpret_cast<char*>(&lo_)) + sizeof(signscale_));
  _internal_metadata_.Clear();
}

const char* Decimal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 lo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          lo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 hi = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          hi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 signScale = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          signscale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Decimal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bcl.Decimal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 lo = 1;
  if (this->lo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_lo(), target);
  }

  // uint32 hi = 2;
  if (this->hi() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_hi(), target);
  }

  // uint32 signScale = 3;
  if (this->signscale() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_signscale(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bcl.Decimal)
  return target;
}

size_t Decimal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bcl.Decimal)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 lo = 1;
  if (this->lo() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_lo());
  }

  // uint32 hi = 2;
  if (this->hi() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_hi());
  }

  // uint32 signScale = 3;
  if (this->signscale() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_signscale());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Decimal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bcl.Decimal)
  GOOGLE_DCHECK_NE(&from, this);
  const Decimal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Decimal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bcl.Decimal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bcl.Decimal)
    MergeFrom(*source);
  }
}

void Decimal::MergeFrom(const Decimal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bcl.Decimal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.lo() != 0) {
    _internal_set_lo(from._internal_lo());
  }
  if (from.hi() != 0) {
    _internal_set_hi(from._internal_hi());
  }
  if (from.signscale() != 0) {
    _internal_set_signscale(from._internal_signscale());
  }
}

void Decimal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bcl.Decimal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Decimal::CopyFrom(const Decimal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bcl.Decimal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Decimal::IsInitialized() const {
  return true;
}

void Decimal::InternalSwap(Decimal* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(lo_, other->lo_);
  swap(hi_, other->hi_);
  swap(signscale_, other->signscale_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Decimal::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace bcl
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bcl::TimeSpan* Arena::CreateMaybeMessage< ::bcl::TimeSpan >(Arena* arena) {
  return Arena::CreateInternal< ::bcl::TimeSpan >(arena);
}
template<> PROTOBUF_NOINLINE ::bcl::DateTime* Arena::CreateMaybeMessage< ::bcl::DateTime >(Arena* arena) {
  return Arena::CreateInternal< ::bcl::DateTime >(arena);
}
template<> PROTOBUF_NOINLINE ::bcl::NetObjectProxy* Arena::CreateMaybeMessage< ::bcl::NetObjectProxy >(Arena* arena) {
  return Arena::CreateInternal< ::bcl::NetObjectProxy >(arena);
}
template<> PROTOBUF_NOINLINE ::bcl::Guid* Arena::CreateMaybeMessage< ::bcl::Guid >(Arena* arena) {
  return Arena::CreateInternal< ::bcl::Guid >(arena);
}
template<> PROTOBUF_NOINLINE ::bcl::Decimal* Arena::CreateMaybeMessage< ::bcl::Decimal >(Arena* arena) {
  return Arena::CreateInternal< ::bcl::Decimal >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
