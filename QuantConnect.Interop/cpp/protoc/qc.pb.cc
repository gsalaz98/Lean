// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: qc.proto

#include "qc.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_qc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_BaseData_qc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_qc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SecurityIdentifier_qc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_qc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Symbol_qc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_qc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Tick_qc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_qc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_TradeBar_qc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bcl_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DateTime_bcl_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bcl_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Decimal_bcl_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bcl_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TimeSpan_bcl_2eproto;
class BaseDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BaseData> _instance;
  const ::TradeBar* tradebar_;
  const ::Tick* tick_;
} _BaseData_default_instance_;
class List_BaseDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<List_BaseData> _instance;
} _List_BaseData_default_instance_;
class SecurityIdentifierDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SecurityIdentifier> _instance;
} _SecurityIdentifier_default_instance_;
class SidBoxDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SidBox> _instance;
} _SidBox_default_instance_;
class SymbolDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Symbol> _instance;
} _Symbol_default_instance_;
class TickDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Tick> _instance;
} _Tick_default_instance_;
class TradeBarDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TradeBar> _instance;
} _TradeBar_default_instance_;
static void InitDefaultsscc_info_BaseData_qc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_BaseData_default_instance_;
    new (ptr) ::BaseData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BaseData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_BaseData_qc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_BaseData_qc_2eproto}, {
      &scc_info_DateTime_bcl_2eproto.base,
      &scc_info_Symbol_qc_2eproto.base,
      &scc_info_Decimal_bcl_2eproto.base,
      &scc_info_TradeBar_qc_2eproto.base,
      &scc_info_Tick_qc_2eproto.base,}};

static void InitDefaultsscc_info_List_BaseData_qc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_List_BaseData_default_instance_;
    new (ptr) ::List_BaseData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::List_BaseData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_List_BaseData_qc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_List_BaseData_qc_2eproto}, {
      &scc_info_BaseData_qc_2eproto.base,}};

static void InitDefaultsscc_info_SecurityIdentifier_qc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SecurityIdentifier_default_instance_;
    new (ptr) ::SecurityIdentifier();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::_SidBox_default_instance_;
    new (ptr) ::SidBox();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SecurityIdentifier::InitAsDefaultInstance();
  ::SidBox::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SecurityIdentifier_qc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SecurityIdentifier_qc_2eproto}, {
      &scc_info_Decimal_bcl_2eproto.base,
      &scc_info_DateTime_bcl_2eproto.base,}};

static void InitDefaultsscc_info_Symbol_qc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Symbol_default_instance_;
    new (ptr) ::Symbol();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Symbol::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Symbol_qc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Symbol_qc_2eproto}, {
      &scc_info_SecurityIdentifier_qc_2eproto.base,}};

static void InitDefaultsscc_info_Tick_qc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Tick_default_instance_;
    new (ptr) ::Tick();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tick::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Tick_qc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Tick_qc_2eproto}, {
      &scc_info_Decimal_bcl_2eproto.base,}};

static void InitDefaultsscc_info_TradeBar_qc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TradeBar_default_instance_;
    new (ptr) ::TradeBar();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TradeBar::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_TradeBar_qc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_TradeBar_qc_2eproto}, {
      &scc_info_Decimal_bcl_2eproto.base,
      &scc_info_DateTime_bcl_2eproto.base,
      &scc_info_TimeSpan_bcl_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_qc_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_qc_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_qc_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_qc_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BaseData, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::BaseData, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BaseData, datatype_),
  PROTOBUF_FIELD_OFFSET(::BaseData, endtime_),
  PROTOBUF_FIELD_OFFSET(::BaseData, isfillforward_),
  PROTOBUF_FIELD_OFFSET(::BaseData, symbol_),
  PROTOBUF_FIELD_OFFSET(::BaseData, time_),
  PROTOBUF_FIELD_OFFSET(::BaseData, value_),
  offsetof(::BaseDataDefaultTypeInternal, tradebar_),
  offsetof(::BaseDataDefaultTypeInternal, tick_),
  PROTOBUF_FIELD_OFFSET(::BaseData, subtype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::List_BaseData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::List_BaseData, items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SecurityIdentifier, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SecurityIdentifier, _symbol_),
  PROTOBUF_FIELD_OFFSET(::SecurityIdentifier, _properties_),
  PROTOBUF_FIELD_OFFSET(::SecurityIdentifier, _underlying_),
  PROTOBUF_FIELD_OFFSET(::SecurityIdentifier, _hashcode_),
  PROTOBUF_FIELD_OFFSET(::SecurityIdentifier, _strikeprice_),
  PROTOBUF_FIELD_OFFSET(::SecurityIdentifier, _optionstyle_),
  PROTOBUF_FIELD_OFFSET(::SecurityIdentifier, _optionright_),
  PROTOBUF_FIELD_OFFSET(::SecurityIdentifier, _date_),
  PROTOBUF_FIELD_OFFSET(::SecurityIdentifier, securitytype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SidBox, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SidBox, securityidentifier_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Symbol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Symbol, hasunderlying_),
  PROTOBUF_FIELD_OFFSET(::Symbol, id_),
  PROTOBUF_FIELD_OFFSET(::Symbol, securitytype_),
  PROTOBUF_FIELD_OFFSET(::Symbol, underlying_),
  PROTOBUF_FIELD_OFFSET(::Symbol, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Tick, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Tick, askprice_),
  PROTOBUF_FIELD_OFFSET(::Tick, asksize_),
  PROTOBUF_FIELD_OFFSET(::Tick, bidprice_),
  PROTOBUF_FIELD_OFFSET(::Tick, bidsize_),
  PROTOBUF_FIELD_OFFSET(::Tick, exchange_),
  PROTOBUF_FIELD_OFFSET(::Tick, quantity_),
  PROTOBUF_FIELD_OFFSET(::Tick, salecondition_),
  PROTOBUF_FIELD_OFFSET(::Tick, suspicious_),
  PROTOBUF_FIELD_OFFSET(::Tick, ticktype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TradeBar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TradeBar, close_),
  PROTOBUF_FIELD_OFFSET(::TradeBar, endtime_),
  PROTOBUF_FIELD_OFFSET(::TradeBar, high_),
  PROTOBUF_FIELD_OFFSET(::TradeBar, low_),
  PROTOBUF_FIELD_OFFSET(::TradeBar, open_),
  PROTOBUF_FIELD_OFFSET(::TradeBar, period_),
  PROTOBUF_FIELD_OFFSET(::TradeBar, volume_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::BaseData)},
  { 14, -1, sizeof(::List_BaseData)},
  { 20, -1, sizeof(::SecurityIdentifier)},
  { 34, -1, sizeof(::SidBox)},
  { 40, -1, sizeof(::Symbol)},
  { 50, -1, sizeof(::Tick)},
  { 64, -1, sizeof(::TradeBar)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_BaseData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_List_BaseData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SecurityIdentifier_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SidBox_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Symbol_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Tick_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TradeBar_default_instance_),
};

const char descriptor_table_protodef_qc_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\010qc.proto\032\tbcl.proto\"\372\001\n\010BaseData\022!\n\010Da"
  "taType\030\001 \001(\0162\017.MarketDataType\022\036\n\007EndTime"
  "\030\002 \001(\0132\r.bcl.DateTime\022\025\n\rIsFillForward\030\003"
  " \001(\010\022\027\n\006Symbol\030\004 \001(\0132\007.Symbol\022\033\n\004Time\030\005 "
  "\001(\0132\r.bcl.DateTime\022\033\n\005Value\030\006 \001(\0132\014.bcl."
  "Decimal\022\036\n\010TradeBar\030\310\001 \001(\0132\t.TradeBarH\000\022"
  "\026\n\004Tick\030\312\001 \001(\0132\005.TickH\000B\t\n\007subtype\")\n\rLi"
  "st_BaseData\022\030\n\005items\030\001 \003(\0132\t.BaseData\"\232\002"
  "\n\022SecurityIdentifier\022\017\n\007_symbol\030\001 \001(\t\022\023\n"
  "\013_properties\030\002 \001(\004\022\034\n\013_underlying\030\003 \001(\0132"
  "\007.SidBox\022\021\n\t_hashCode\030\004 \001(\005\022\"\n\014_strikePr"
  "ice\030\005 \001(\0132\014.bcl.Decimal\022\"\n\014_optionStyle\030"
  "\006 \001(\0162\014.OptionStyle\022\"\n\014_optionRight\030\007 \001("
  "\0162\014.OptionRight\022\034\n\005_date\030\010 \001(\0132\r.bcl.Dat"
  "eTime\022#\n\014SecurityType\030\t \001(\0162\r.SecurityTy"
  "pe\"9\n\006SidBox\022/\n\022SecurityIdentifier\030\001 \001(\013"
  "2\023.SecurityIdentifier\"\221\001\n\006Symbol\022\025\n\rHasU"
  "nderlying\030\001 \001(\010\022\037\n\002ID\030\002 \001(\0132\023.SecurityId"
  "entifier\022#\n\014SecurityType\030\003 \001(\0162\r.Securit"
  "yType\022\033\n\nUnderlying\030\004 \001(\0132\007.Symbol\022\r\n\005Va"
  "lue\030\005 \001(\t\"\376\001\n\004Tick\022\036\n\010AskPrice\030\001 \001(\0132\014.b"
  "cl.Decimal\022\035\n\007AskSize\030\002 \001(\0132\014.bcl.Decima"
  "l\022\036\n\010BidPrice\030\003 \001(\0132\014.bcl.Decimal\022\035\n\007Bid"
  "Size\030\004 \001(\0132\014.bcl.Decimal\022\020\n\010Exchange\030\005 \001"
  "(\t\022\036\n\010Quantity\030\006 \001(\0132\014.bcl.Decimal\022\025\n\rSa"
  "leCondition\030\007 \001(\t\022\022\n\nSuspicious\030\010 \001(\010\022\033\n"
  "\010TickType\030\t \001(\0162\t.TickType\"\327\001\n\010TradeBar\022"
  "\033\n\005Close\030\001 \001(\0132\014.bcl.Decimal\022\036\n\007EndTime\030"
  "\002 \001(\0132\r.bcl.DateTime\022\032\n\004High\030\003 \001(\0132\014.bcl"
  ".Decimal\022\031\n\003Low\030\004 \001(\0132\014.bcl.Decimal\022\032\n\004O"
  "pen\030\005 \001(\0132\014.bcl.Decimal\022\035\n\006Period\030\006 \001(\0132"
  "\r.bcl.TimeSpan\022\034\n\006Volume\030\007 \001(\0132\014.bcl.Dec"
  "imal*\222\001\n\016MarketDataType\022\014\n\010BaseType\020\000\022\020\n"
  "\014TradeBarType\020\001\022\020\n\014TickTypeType\020\002\022\021\n\rAux"
  "iliaryType\020\003\022\020\n\014QuoteBarType\020\004\022\023\n\017Option"
  "ChainType\020\005\022\024\n\020FuturesChainType\020\006* \n\013Opt"
  "ionRight\022\010\n\004Call\020\000\022\007\n\003Put\020\001*)\n\013OptionSty"
  "le\022\014\n\010American\020\000\022\014\n\010European\020\001*k\n\014Securi"
  "tyType\022\010\n\004Base\020\000\022\n\n\006Equity\020\001\022\n\n\006Option\020\002"
  "\022\r\n\tCommodity\020\003\022\t\n\005Forex\020\004\022\n\n\006Future\020\005\022\007"
  "\n\003Cfd\020\006\022\n\n\006Crypto\020\007*2\n\010TickType\022\t\n\005Trade"
  "\020\000\022\t\n\005Quote\020\001\022\020\n\014OpenInterest\020\002b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_qc_2eproto_deps[1] = {
  &::descriptor_table_bcl_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_qc_2eproto_sccs[6] = {
  &scc_info_BaseData_qc_2eproto.base,
  &scc_info_List_BaseData_qc_2eproto.base,
  &scc_info_SecurityIdentifier_qc_2eproto.base,
  &scc_info_Symbol_qc_2eproto.base,
  &scc_info_Tick_qc_2eproto.base,
  &scc_info_TradeBar_qc_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_qc_2eproto_once;
static bool descriptor_table_qc_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_qc_2eproto = {
  &descriptor_table_qc_2eproto_initialized, descriptor_table_protodef_qc_2eproto, "qc.proto", 1679,
  &descriptor_table_qc_2eproto_once, descriptor_table_qc_2eproto_sccs, descriptor_table_qc_2eproto_deps, 6, 1,
  schemas, file_default_instances, TableStruct_qc_2eproto::offsets,
  file_level_metadata_qc_2eproto, 7, file_level_enum_descriptors_qc_2eproto, file_level_service_descriptors_qc_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_qc_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_qc_2eproto), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MarketDataType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_qc_2eproto);
  return file_level_enum_descriptors_qc_2eproto[0];
}
bool MarketDataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OptionRight_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_qc_2eproto);
  return file_level_enum_descriptors_qc_2eproto[1];
}
bool OptionRight_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OptionStyle_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_qc_2eproto);
  return file_level_enum_descriptors_qc_2eproto[2];
}
bool OptionStyle_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SecurityType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_qc_2eproto);
  return file_level_enum_descriptors_qc_2eproto[3];
}
bool SecurityType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TickType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_qc_2eproto);
  return file_level_enum_descriptors_qc_2eproto[4];
}
bool TickType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void BaseData::InitAsDefaultInstance() {
  ::_BaseData_default_instance_._instance.get_mutable()->endtime_ = const_cast< ::bcl::DateTime*>(
      ::bcl::DateTime::internal_default_instance());
  ::_BaseData_default_instance_._instance.get_mutable()->symbol_ = const_cast< ::Symbol*>(
      ::Symbol::internal_default_instance());
  ::_BaseData_default_instance_._instance.get_mutable()->time_ = const_cast< ::bcl::DateTime*>(
      ::bcl::DateTime::internal_default_instance());
  ::_BaseData_default_instance_._instance.get_mutable()->value_ = const_cast< ::bcl::Decimal*>(
      ::bcl::Decimal::internal_default_instance());
  ::_BaseData_default_instance_.tradebar_ = const_cast< ::TradeBar*>(
      ::TradeBar::internal_default_instance());
  ::_BaseData_default_instance_.tick_ = const_cast< ::Tick*>(
      ::Tick::internal_default_instance());
}
class BaseData::_Internal {
 public:
  static const ::bcl::DateTime& endtime(const BaseData* msg);
  static const ::Symbol& symbol(const BaseData* msg);
  static const ::bcl::DateTime& time(const BaseData* msg);
  static const ::bcl::Decimal& value(const BaseData* msg);
  static const ::TradeBar& tradebar(const BaseData* msg);
  static const ::Tick& tick(const BaseData* msg);
};

const ::bcl::DateTime&
BaseData::_Internal::endtime(const BaseData* msg) {
  return *msg->endtime_;
}
const ::Symbol&
BaseData::_Internal::symbol(const BaseData* msg) {
  return *msg->symbol_;
}
const ::bcl::DateTime&
BaseData::_Internal::time(const BaseData* msg) {
  return *msg->time_;
}
const ::bcl::Decimal&
BaseData::_Internal::value(const BaseData* msg) {
  return *msg->value_;
}
const ::TradeBar&
BaseData::_Internal::tradebar(const BaseData* msg) {
  return *msg->subtype_.tradebar_;
}
const ::Tick&
BaseData::_Internal::tick(const BaseData* msg) {
  return *msg->subtype_.tick_;
}
void BaseData::clear_endtime() {
  if (GetArenaNoVirtual() == nullptr && endtime_ != nullptr) {
    delete endtime_;
  }
  endtime_ = nullptr;
}
void BaseData::clear_time() {
  if (GetArenaNoVirtual() == nullptr && time_ != nullptr) {
    delete time_;
  }
  time_ = nullptr;
}
void BaseData::clear_value() {
  if (GetArenaNoVirtual() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
}
void BaseData::set_allocated_tradebar(::TradeBar* tradebar) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_subtype();
  if (tradebar) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tradebar = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tradebar, submessage_arena);
    }
    set_has_tradebar();
    subtype_.tradebar_ = tradebar;
  }
  // @@protoc_insertion_point(field_set_allocated:BaseData.TradeBar)
}
void BaseData::set_allocated_tick(::Tick* tick) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_subtype();
  if (tick) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tick = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tick, submessage_arena);
    }
    set_has_tick();
    subtype_.tick_ = tick;
  }
  // @@protoc_insertion_point(field_set_allocated:BaseData.Tick)
}
BaseData::BaseData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BaseData)
}
BaseData::BaseData(const BaseData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_endtime()) {
    endtime_ = new ::bcl::DateTime(*from.endtime_);
  } else {
    endtime_ = nullptr;
  }
  if (from._internal_has_symbol()) {
    symbol_ = new ::Symbol(*from.symbol_);
  } else {
    symbol_ = nullptr;
  }
  if (from._internal_has_time()) {
    time_ = new ::bcl::DateTime(*from.time_);
  } else {
    time_ = nullptr;
  }
  if (from._internal_has_value()) {
    value_ = new ::bcl::Decimal(*from.value_);
  } else {
    value_ = nullptr;
  }
  ::memcpy(&datatype_, &from.datatype_,
    static_cast<size_t>(reinterpret_cast<char*>(&isfillforward_) -
    reinterpret_cast<char*>(&datatype_)) + sizeof(isfillforward_));
  clear_has_subtype();
  switch (from.subtype_case()) {
    case kTradeBar: {
      _internal_mutable_tradebar()->::TradeBar::MergeFrom(from._internal_tradebar());
      break;
    }
    case kTick: {
      _internal_mutable_tick()->::Tick::MergeFrom(from._internal_tick());
      break;
    }
    case SUBTYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:BaseData)
}

void BaseData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BaseData_qc_2eproto.base);
  ::memset(&endtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isfillforward_) -
      reinterpret_cast<char*>(&endtime_)) + sizeof(isfillforward_));
  clear_has_subtype();
}

BaseData::~BaseData() {
  // @@protoc_insertion_point(destructor:BaseData)
  SharedDtor();
}

void BaseData::SharedDtor() {
  if (this != internal_default_instance()) delete endtime_;
  if (this != internal_default_instance()) delete symbol_;
  if (this != internal_default_instance()) delete time_;
  if (this != internal_default_instance()) delete value_;
  if (has_subtype()) {
    clear_subtype();
  }
}

void BaseData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BaseData& BaseData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BaseData_qc_2eproto.base);
  return *internal_default_instance();
}


void BaseData::clear_subtype() {
// @@protoc_insertion_point(one_of_clear_start:BaseData)
  switch (subtype_case()) {
    case kTradeBar: {
      delete subtype_.tradebar_;
      break;
    }
    case kTick: {
      delete subtype_.tick_;
      break;
    }
    case SUBTYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SUBTYPE_NOT_SET;
}


void BaseData::Clear() {
// @@protoc_insertion_point(message_clear_start:BaseData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && endtime_ != nullptr) {
    delete endtime_;
  }
  endtime_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && symbol_ != nullptr) {
    delete symbol_;
  }
  symbol_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && time_ != nullptr) {
    delete time_;
  }
  time_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  ::memset(&datatype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isfillforward_) -
      reinterpret_cast<char*>(&datatype_)) + sizeof(isfillforward_));
  clear_subtype();
  _internal_metadata_.Clear();
}

const char* BaseData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .MarketDataType DataType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_datatype(static_cast<::MarketDataType>(val));
        } else goto handle_unusual;
        continue;
      // .bcl.DateTime EndTime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_endtime(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool IsFillForward = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          isfillforward_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Symbol Symbol = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_symbol(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bcl.DateTime Time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bcl.Decimal Value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TradeBar TradeBar = 200;
      case 200:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_tradebar(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Tick Tick = 202;
      case 202:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_tick(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BaseData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BaseData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .MarketDataType DataType = 1;
  if (this->datatype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_datatype(), target);
  }

  // .bcl.DateTime EndTime = 2;
  if (this->has_endtime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::endtime(this), target, stream);
  }

  // bool IsFillForward = 3;
  if (this->isfillforward() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_isfillforward(), target);
  }

  // .Symbol Symbol = 4;
  if (this->has_symbol()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::symbol(this), target, stream);
  }

  // .bcl.DateTime Time = 5;
  if (this->has_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::time(this), target, stream);
  }

  // .bcl.Decimal Value = 6;
  if (this->has_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::value(this), target, stream);
  }

  // .TradeBar TradeBar = 200;
  if (_internal_has_tradebar()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        200, _Internal::tradebar(this), target, stream);
  }

  // .Tick Tick = 202;
  if (_internal_has_tick()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        202, _Internal::tick(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BaseData)
  return target;
}

size_t BaseData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BaseData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bcl.DateTime EndTime = 2;
  if (this->has_endtime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *endtime_);
  }

  // .Symbol Symbol = 4;
  if (this->has_symbol()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *symbol_);
  }

  // .bcl.DateTime Time = 5;
  if (this->has_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_);
  }

  // .bcl.Decimal Value = 6;
  if (this->has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  // .MarketDataType DataType = 1;
  if (this->datatype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_datatype());
  }

  // bool IsFillForward = 3;
  if (this->isfillforward() != 0) {
    total_size += 1 + 1;
  }

  switch (subtype_case()) {
    // .TradeBar TradeBar = 200;
    case kTradeBar: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *subtype_.tradebar_);
      break;
    }
    // .Tick Tick = 202;
    case kTick: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *subtype_.tick_);
      break;
    }
    case SUBTYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BaseData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BaseData)
  GOOGLE_DCHECK_NE(&from, this);
  const BaseData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BaseData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BaseData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BaseData)
    MergeFrom(*source);
  }
}

void BaseData::MergeFrom(const BaseData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BaseData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_endtime()) {
    _internal_mutable_endtime()->::bcl::DateTime::MergeFrom(from._internal_endtime());
  }
  if (from.has_symbol()) {
    _internal_mutable_symbol()->::Symbol::MergeFrom(from._internal_symbol());
  }
  if (from.has_time()) {
    _internal_mutable_time()->::bcl::DateTime::MergeFrom(from._internal_time());
  }
  if (from.has_value()) {
    _internal_mutable_value()->::bcl::Decimal::MergeFrom(from._internal_value());
  }
  if (from.datatype() != 0) {
    _internal_set_datatype(from._internal_datatype());
  }
  if (from.isfillforward() != 0) {
    _internal_set_isfillforward(from._internal_isfillforward());
  }
  switch (from.subtype_case()) {
    case kTradeBar: {
      _internal_mutable_tradebar()->::TradeBar::MergeFrom(from._internal_tradebar());
      break;
    }
    case kTick: {
      _internal_mutable_tick()->::Tick::MergeFrom(from._internal_tick());
      break;
    }
    case SUBTYPE_NOT_SET: {
      break;
    }
  }
}

void BaseData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BaseData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaseData::CopyFrom(const BaseData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BaseData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseData::IsInitialized() const {
  return true;
}

void BaseData::InternalSwap(BaseData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(endtime_, other->endtime_);
  swap(symbol_, other->symbol_);
  swap(time_, other->time_);
  swap(value_, other->value_);
  swap(datatype_, other->datatype_);
  swap(isfillforward_, other->isfillforward_);
  swap(subtype_, other->subtype_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata BaseData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void List_BaseData::InitAsDefaultInstance() {
}
class List_BaseData::_Internal {
 public:
};

List_BaseData::List_BaseData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:List_BaseData)
}
List_BaseData::List_BaseData(const List_BaseData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      items_(from.items_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:List_BaseData)
}

void List_BaseData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_List_BaseData_qc_2eproto.base);
}

List_BaseData::~List_BaseData() {
  // @@protoc_insertion_point(destructor:List_BaseData)
  SharedDtor();
}

void List_BaseData::SharedDtor() {
}

void List_BaseData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const List_BaseData& List_BaseData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_List_BaseData_qc_2eproto.base);
  return *internal_default_instance();
}


void List_BaseData::Clear() {
// @@protoc_insertion_point(message_clear_start:List_BaseData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  _internal_metadata_.Clear();
}

const char* List_BaseData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .BaseData items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* List_BaseData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:List_BaseData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .BaseData items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:List_BaseData)
  return target;
}

size_t List_BaseData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:List_BaseData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BaseData items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void List_BaseData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:List_BaseData)
  GOOGLE_DCHECK_NE(&from, this);
  const List_BaseData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<List_BaseData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:List_BaseData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:List_BaseData)
    MergeFrom(*source);
  }
}

void List_BaseData::MergeFrom(const List_BaseData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:List_BaseData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
}

void List_BaseData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:List_BaseData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void List_BaseData::CopyFrom(const List_BaseData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:List_BaseData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool List_BaseData::IsInitialized() const {
  return true;
}

void List_BaseData::InternalSwap(List_BaseData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata List_BaseData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SecurityIdentifier::InitAsDefaultInstance() {
  ::_SecurityIdentifier_default_instance_._instance.get_mutable()->_underlying_ = const_cast< ::SidBox*>(
      ::SidBox::internal_default_instance());
  ::_SecurityIdentifier_default_instance_._instance.get_mutable()->_strikeprice_ = const_cast< ::bcl::Decimal*>(
      ::bcl::Decimal::internal_default_instance());
  ::_SecurityIdentifier_default_instance_._instance.get_mutable()->_date_ = const_cast< ::bcl::DateTime*>(
      ::bcl::DateTime::internal_default_instance());
}
class SecurityIdentifier::_Internal {
 public:
  static const ::SidBox& _underlying(const SecurityIdentifier* msg);
  static const ::bcl::Decimal& _strikeprice(const SecurityIdentifier* msg);
  static const ::bcl::DateTime& _date(const SecurityIdentifier* msg);
};

const ::SidBox&
SecurityIdentifier::_Internal::_underlying(const SecurityIdentifier* msg) {
  return *msg->_underlying_;
}
const ::bcl::Decimal&
SecurityIdentifier::_Internal::_strikeprice(const SecurityIdentifier* msg) {
  return *msg->_strikeprice_;
}
const ::bcl::DateTime&
SecurityIdentifier::_Internal::_date(const SecurityIdentifier* msg) {
  return *msg->_date_;
}
void SecurityIdentifier::clear__strikeprice() {
  if (GetArenaNoVirtual() == nullptr && _strikeprice_ != nullptr) {
    delete _strikeprice_;
  }
  _strikeprice_ = nullptr;
}
void SecurityIdentifier::clear__date() {
  if (GetArenaNoVirtual() == nullptr && _date_ != nullptr) {
    delete _date_;
  }
  _date_ = nullptr;
}
SecurityIdentifier::SecurityIdentifier()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SecurityIdentifier)
}
SecurityIdentifier::SecurityIdentifier(const SecurityIdentifier& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  _symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal__symbol().empty()) {
    _symbol_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._symbol_);
  }
  if (from._internal_has__underlying()) {
    _underlying_ = new ::SidBox(*from._underlying_);
  } else {
    _underlying_ = nullptr;
  }
  if (from._internal_has__strikeprice()) {
    _strikeprice_ = new ::bcl::Decimal(*from._strikeprice_);
  } else {
    _strikeprice_ = nullptr;
  }
  if (from._internal_has__date()) {
    _date_ = new ::bcl::DateTime(*from._date_);
  } else {
    _date_ = nullptr;
  }
  ::memcpy(&_properties_, &from._properties_,
    static_cast<size_t>(reinterpret_cast<char*>(&securitytype_) -
    reinterpret_cast<char*>(&_properties_)) + sizeof(securitytype_));
  // @@protoc_insertion_point(copy_constructor:SecurityIdentifier)
}

void SecurityIdentifier::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SecurityIdentifier_qc_2eproto.base);
  _symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&_underlying_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&securitytype_) -
      reinterpret_cast<char*>(&_underlying_)) + sizeof(securitytype_));
}

SecurityIdentifier::~SecurityIdentifier() {
  // @@protoc_insertion_point(destructor:SecurityIdentifier)
  SharedDtor();
}

void SecurityIdentifier::SharedDtor() {
  _symbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete _underlying_;
  if (this != internal_default_instance()) delete _strikeprice_;
  if (this != internal_default_instance()) delete _date_;
}

void SecurityIdentifier::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SecurityIdentifier& SecurityIdentifier::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SecurityIdentifier_qc_2eproto.base);
  return *internal_default_instance();
}


void SecurityIdentifier::Clear() {
// @@protoc_insertion_point(message_clear_start:SecurityIdentifier)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _symbol_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && _underlying_ != nullptr) {
    delete _underlying_;
  }
  _underlying_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && _strikeprice_ != nullptr) {
    delete _strikeprice_;
  }
  _strikeprice_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && _date_ != nullptr) {
    delete _date_;
  }
  _date_ = nullptr;
  ::memset(&_properties_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&securitytype_) -
      reinterpret_cast<char*>(&_properties_)) + sizeof(securitytype_));
  _internal_metadata_.Clear();
}

const char* SecurityIdentifier::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string _symbol = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable__symbol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SecurityIdentifier._symbol"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 _properties = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _properties_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SidBox _underlying = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable__underlying(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 _hashCode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _hashcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bcl.Decimal _strikePrice = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable__strikeprice(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .OptionStyle _optionStyle = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set__optionstyle(static_cast<::OptionStyle>(val));
        } else goto handle_unusual;
        continue;
      // .OptionRight _optionRight = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set__optionright(static_cast<::OptionRight>(val));
        } else goto handle_unusual;
        continue;
      // .bcl.DateTime _date = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable__date(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SecurityType SecurityType = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_securitytype(static_cast<::SecurityType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SecurityIdentifier::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SecurityIdentifier)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string _symbol = 1;
  if (this->_symbol().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal__symbol().data(), static_cast<int>(this->_internal__symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SecurityIdentifier._symbol");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal__symbol(), target);
  }

  // uint64 _properties = 2;
  if (this->_properties() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal__properties(), target);
  }

  // .SidBox _underlying = 3;
  if (this->has__underlying()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::_underlying(this), target, stream);
  }

  // int32 _hashCode = 4;
  if (this->_hashcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal__hashcode(), target);
  }

  // .bcl.Decimal _strikePrice = 5;
  if (this->has__strikeprice()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::_strikeprice(this), target, stream);
  }

  // .OptionStyle _optionStyle = 6;
  if (this->_optionstyle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal__optionstyle(), target);
  }

  // .OptionRight _optionRight = 7;
  if (this->_optionright() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal__optionright(), target);
  }

  // .bcl.DateTime _date = 8;
  if (this->has__date()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::_date(this), target, stream);
  }

  // .SecurityType SecurityType = 9;
  if (this->securitytype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_securitytype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SecurityIdentifier)
  return target;
}

size_t SecurityIdentifier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SecurityIdentifier)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string _symbol = 1;
  if (this->_symbol().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal__symbol());
  }

  // .SidBox _underlying = 3;
  if (this->has__underlying()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_underlying_);
  }

  // .bcl.Decimal _strikePrice = 5;
  if (this->has__strikeprice()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_strikeprice_);
  }

  // .bcl.DateTime _date = 8;
  if (this->has__date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_date_);
  }

  // uint64 _properties = 2;
  if (this->_properties() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__properties());
  }

  // int32 _hashCode = 4;
  if (this->_hashcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal__hashcode());
  }

  // .OptionStyle _optionStyle = 6;
  if (this->_optionstyle() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal__optionstyle());
  }

  // .OptionRight _optionRight = 7;
  if (this->_optionright() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal__optionright());
  }

  // .SecurityType SecurityType = 9;
  if (this->securitytype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_securitytype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SecurityIdentifier::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SecurityIdentifier)
  GOOGLE_DCHECK_NE(&from, this);
  const SecurityIdentifier* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SecurityIdentifier>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SecurityIdentifier)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SecurityIdentifier)
    MergeFrom(*source);
  }
}

void SecurityIdentifier::MergeFrom(const SecurityIdentifier& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SecurityIdentifier)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._symbol().size() > 0) {

    _symbol_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._symbol_);
  }
  if (from.has__underlying()) {
    _internal_mutable__underlying()->::SidBox::MergeFrom(from._internal__underlying());
  }
  if (from.has__strikeprice()) {
    _internal_mutable__strikeprice()->::bcl::Decimal::MergeFrom(from._internal__strikeprice());
  }
  if (from.has__date()) {
    _internal_mutable__date()->::bcl::DateTime::MergeFrom(from._internal__date());
  }
  if (from._properties() != 0) {
    _internal_set__properties(from._internal__properties());
  }
  if (from._hashcode() != 0) {
    _internal_set__hashcode(from._internal__hashcode());
  }
  if (from._optionstyle() != 0) {
    _internal_set__optionstyle(from._internal__optionstyle());
  }
  if (from._optionright() != 0) {
    _internal_set__optionright(from._internal__optionright());
  }
  if (from.securitytype() != 0) {
    _internal_set_securitytype(from._internal_securitytype());
  }
}

void SecurityIdentifier::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SecurityIdentifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SecurityIdentifier::CopyFrom(const SecurityIdentifier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SecurityIdentifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecurityIdentifier::IsInitialized() const {
  return true;
}

void SecurityIdentifier::InternalSwap(SecurityIdentifier* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  _symbol_.Swap(&other->_symbol_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_underlying_, other->_underlying_);
  swap(_strikeprice_, other->_strikeprice_);
  swap(_date_, other->_date_);
  swap(_properties_, other->_properties_);
  swap(_hashcode_, other->_hashcode_);
  swap(_optionstyle_, other->_optionstyle_);
  swap(_optionright_, other->_optionright_);
  swap(securitytype_, other->securitytype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SecurityIdentifier::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SidBox::InitAsDefaultInstance() {
  ::_SidBox_default_instance_._instance.get_mutable()->securityidentifier_ = const_cast< ::SecurityIdentifier*>(
      ::SecurityIdentifier::internal_default_instance());
}
class SidBox::_Internal {
 public:
  static const ::SecurityIdentifier& securityidentifier(const SidBox* msg);
};

const ::SecurityIdentifier&
SidBox::_Internal::securityidentifier(const SidBox* msg) {
  return *msg->securityidentifier_;
}
SidBox::SidBox()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SidBox)
}
SidBox::SidBox(const SidBox& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_securityidentifier()) {
    securityidentifier_ = new ::SecurityIdentifier(*from.securityidentifier_);
  } else {
    securityidentifier_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:SidBox)
}

void SidBox::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SecurityIdentifier_qc_2eproto.base);
  securityidentifier_ = nullptr;
}

SidBox::~SidBox() {
  // @@protoc_insertion_point(destructor:SidBox)
  SharedDtor();
}

void SidBox::SharedDtor() {
  if (this != internal_default_instance()) delete securityidentifier_;
}

void SidBox::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SidBox& SidBox::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SecurityIdentifier_qc_2eproto.base);
  return *internal_default_instance();
}


void SidBox::Clear() {
// @@protoc_insertion_point(message_clear_start:SidBox)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && securityidentifier_ != nullptr) {
    delete securityidentifier_;
  }
  securityidentifier_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SidBox::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .SecurityIdentifier SecurityIdentifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_securityidentifier(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SidBox::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SidBox)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .SecurityIdentifier SecurityIdentifier = 1;
  if (this->has_securityidentifier()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::securityidentifier(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SidBox)
  return target;
}

size_t SidBox::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SidBox)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .SecurityIdentifier SecurityIdentifier = 1;
  if (this->has_securityidentifier()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *securityidentifier_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SidBox::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SidBox)
  GOOGLE_DCHECK_NE(&from, this);
  const SidBox* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SidBox>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SidBox)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SidBox)
    MergeFrom(*source);
  }
}

void SidBox::MergeFrom(const SidBox& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SidBox)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_securityidentifier()) {
    _internal_mutable_securityidentifier()->::SecurityIdentifier::MergeFrom(from._internal_securityidentifier());
  }
}

void SidBox::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SidBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SidBox::CopyFrom(const SidBox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SidBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SidBox::IsInitialized() const {
  return true;
}

void SidBox::InternalSwap(SidBox* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(securityidentifier_, other->securityidentifier_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SidBox::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Symbol::InitAsDefaultInstance() {
  ::_Symbol_default_instance_._instance.get_mutable()->id_ = const_cast< ::SecurityIdentifier*>(
      ::SecurityIdentifier::internal_default_instance());
  ::_Symbol_default_instance_._instance.get_mutable()->underlying_ = const_cast< ::Symbol*>(
      ::Symbol::internal_default_instance());
}
class Symbol::_Internal {
 public:
  static const ::SecurityIdentifier& id(const Symbol* msg);
  static const ::Symbol& underlying(const Symbol* msg);
};

const ::SecurityIdentifier&
Symbol::_Internal::id(const Symbol* msg) {
  return *msg->id_;
}
const ::Symbol&
Symbol::_Internal::underlying(const Symbol* msg) {
  return *msg->underlying_;
}
Symbol::Symbol()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Symbol)
}
Symbol::Symbol(const Symbol& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from._internal_has_id()) {
    id_ = new ::SecurityIdentifier(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_underlying()) {
    underlying_ = new ::Symbol(*from.underlying_);
  } else {
    underlying_ = nullptr;
  }
  ::memcpy(&hasunderlying_, &from.hasunderlying_,
    static_cast<size_t>(reinterpret_cast<char*>(&securitytype_) -
    reinterpret_cast<char*>(&hasunderlying_)) + sizeof(securitytype_));
  // @@protoc_insertion_point(copy_constructor:Symbol)
}

void Symbol::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Symbol_qc_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&securitytype_) -
      reinterpret_cast<char*>(&id_)) + sizeof(securitytype_));
}

Symbol::~Symbol() {
  // @@protoc_insertion_point(destructor:Symbol)
  SharedDtor();
}

void Symbol::SharedDtor() {
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete underlying_;
}

void Symbol::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Symbol& Symbol::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Symbol_qc_2eproto.base);
  return *internal_default_instance();
}


void Symbol::Clear() {
// @@protoc_insertion_point(message_clear_start:Symbol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && underlying_ != nullptr) {
    delete underlying_;
  }
  underlying_ = nullptr;
  ::memset(&hasunderlying_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&securitytype_) -
      reinterpret_cast<char*>(&hasunderlying_)) + sizeof(securitytype_));
  _internal_metadata_.Clear();
}

const char* Symbol::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool HasUnderlying = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          hasunderlying_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SecurityIdentifier ID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SecurityType SecurityType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_securitytype(static_cast<::SecurityType>(val));
        } else goto handle_unusual;
        continue;
      // .Symbol Underlying = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_underlying(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Symbol.Value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Symbol::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Symbol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool HasUnderlying = 1;
  if (this->hasunderlying() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_hasunderlying(), target);
  }

  // .SecurityIdentifier ID = 2;
  if (this->has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::id(this), target, stream);
  }

  // .SecurityType SecurityType = 3;
  if (this->securitytype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_securitytype(), target);
  }

  // .Symbol Underlying = 4;
  if (this->has_underlying()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::underlying(this), target, stream);
  }

  // string Value = 5;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Symbol.Value");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Symbol)
  return target;
}

size_t Symbol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Symbol)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Value = 5;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // .SecurityIdentifier ID = 2;
  if (this->has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .Symbol Underlying = 4;
  if (this->has_underlying()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *underlying_);
  }

  // bool HasUnderlying = 1;
  if (this->hasunderlying() != 0) {
    total_size += 1 + 1;
  }

  // .SecurityType SecurityType = 3;
  if (this->securitytype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_securitytype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Symbol::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Symbol)
  GOOGLE_DCHECK_NE(&from, this);
  const Symbol* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Symbol>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Symbol)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Symbol)
    MergeFrom(*source);
  }
}

void Symbol::MergeFrom(const Symbol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Symbol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.has_id()) {
    _internal_mutable_id()->::SecurityIdentifier::MergeFrom(from._internal_id());
  }
  if (from.has_underlying()) {
    _internal_mutable_underlying()->::Symbol::MergeFrom(from._internal_underlying());
  }
  if (from.hasunderlying() != 0) {
    _internal_set_hasunderlying(from._internal_hasunderlying());
  }
  if (from.securitytype() != 0) {
    _internal_set_securitytype(from._internal_securitytype());
  }
}

void Symbol::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Symbol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Symbol::CopyFrom(const Symbol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Symbol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Symbol::IsInitialized() const {
  return true;
}

void Symbol::InternalSwap(Symbol* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(underlying_, other->underlying_);
  swap(hasunderlying_, other->hasunderlying_);
  swap(securitytype_, other->securitytype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Symbol::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Tick::InitAsDefaultInstance() {
  ::_Tick_default_instance_._instance.get_mutable()->askprice_ = const_cast< ::bcl::Decimal*>(
      ::bcl::Decimal::internal_default_instance());
  ::_Tick_default_instance_._instance.get_mutable()->asksize_ = const_cast< ::bcl::Decimal*>(
      ::bcl::Decimal::internal_default_instance());
  ::_Tick_default_instance_._instance.get_mutable()->bidprice_ = const_cast< ::bcl::Decimal*>(
      ::bcl::Decimal::internal_default_instance());
  ::_Tick_default_instance_._instance.get_mutable()->bidsize_ = const_cast< ::bcl::Decimal*>(
      ::bcl::Decimal::internal_default_instance());
  ::_Tick_default_instance_._instance.get_mutable()->quantity_ = const_cast< ::bcl::Decimal*>(
      ::bcl::Decimal::internal_default_instance());
}
class Tick::_Internal {
 public:
  static const ::bcl::Decimal& askprice(const Tick* msg);
  static const ::bcl::Decimal& asksize(const Tick* msg);
  static const ::bcl::Decimal& bidprice(const Tick* msg);
  static const ::bcl::Decimal& bidsize(const Tick* msg);
  static const ::bcl::Decimal& quantity(const Tick* msg);
};

const ::bcl::Decimal&
Tick::_Internal::askprice(const Tick* msg) {
  return *msg->askprice_;
}
const ::bcl::Decimal&
Tick::_Internal::asksize(const Tick* msg) {
  return *msg->asksize_;
}
const ::bcl::Decimal&
Tick::_Internal::bidprice(const Tick* msg) {
  return *msg->bidprice_;
}
const ::bcl::Decimal&
Tick::_Internal::bidsize(const Tick* msg) {
  return *msg->bidsize_;
}
const ::bcl::Decimal&
Tick::_Internal::quantity(const Tick* msg) {
  return *msg->quantity_;
}
void Tick::clear_askprice() {
  if (GetArenaNoVirtual() == nullptr && askprice_ != nullptr) {
    delete askprice_;
  }
  askprice_ = nullptr;
}
void Tick::clear_asksize() {
  if (GetArenaNoVirtual() == nullptr && asksize_ != nullptr) {
    delete asksize_;
  }
  asksize_ = nullptr;
}
void Tick::clear_bidprice() {
  if (GetArenaNoVirtual() == nullptr && bidprice_ != nullptr) {
    delete bidprice_;
  }
  bidprice_ = nullptr;
}
void Tick::clear_bidsize() {
  if (GetArenaNoVirtual() == nullptr && bidsize_ != nullptr) {
    delete bidsize_;
  }
  bidsize_ = nullptr;
}
void Tick::clear_quantity() {
  if (GetArenaNoVirtual() == nullptr && quantity_ != nullptr) {
    delete quantity_;
  }
  quantity_ = nullptr;
}
Tick::Tick()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tick)
}
Tick::Tick(const Tick& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  exchange_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_exchange().empty()) {
    exchange_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.exchange_);
  }
  salecondition_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_salecondition().empty()) {
    salecondition_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.salecondition_);
  }
  if (from._internal_has_askprice()) {
    askprice_ = new ::bcl::Decimal(*from.askprice_);
  } else {
    askprice_ = nullptr;
  }
  if (from._internal_has_asksize()) {
    asksize_ = new ::bcl::Decimal(*from.asksize_);
  } else {
    asksize_ = nullptr;
  }
  if (from._internal_has_bidprice()) {
    bidprice_ = new ::bcl::Decimal(*from.bidprice_);
  } else {
    bidprice_ = nullptr;
  }
  if (from._internal_has_bidsize()) {
    bidsize_ = new ::bcl::Decimal(*from.bidsize_);
  } else {
    bidsize_ = nullptr;
  }
  if (from._internal_has_quantity()) {
    quantity_ = new ::bcl::Decimal(*from.quantity_);
  } else {
    quantity_ = nullptr;
  }
  ::memcpy(&suspicious_, &from.suspicious_,
    static_cast<size_t>(reinterpret_cast<char*>(&ticktype_) -
    reinterpret_cast<char*>(&suspicious_)) + sizeof(ticktype_));
  // @@protoc_insertion_point(copy_constructor:Tick)
}

void Tick::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Tick_qc_2eproto.base);
  exchange_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  salecondition_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&askprice_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ticktype_) -
      reinterpret_cast<char*>(&askprice_)) + sizeof(ticktype_));
}

Tick::~Tick() {
  // @@protoc_insertion_point(destructor:Tick)
  SharedDtor();
}

void Tick::SharedDtor() {
  exchange_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  salecondition_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete askprice_;
  if (this != internal_default_instance()) delete asksize_;
  if (this != internal_default_instance()) delete bidprice_;
  if (this != internal_default_instance()) delete bidsize_;
  if (this != internal_default_instance()) delete quantity_;
}

void Tick::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Tick& Tick::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Tick_qc_2eproto.base);
  return *internal_default_instance();
}


void Tick::Clear() {
// @@protoc_insertion_point(message_clear_start:Tick)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  exchange_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  salecondition_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && askprice_ != nullptr) {
    delete askprice_;
  }
  askprice_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && asksize_ != nullptr) {
    delete asksize_;
  }
  asksize_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && bidprice_ != nullptr) {
    delete bidprice_;
  }
  bidprice_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && bidsize_ != nullptr) {
    delete bidsize_;
  }
  bidsize_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && quantity_ != nullptr) {
    delete quantity_;
  }
  quantity_ = nullptr;
  ::memset(&suspicious_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ticktype_) -
      reinterpret_cast<char*>(&suspicious_)) + sizeof(ticktype_));
  _internal_metadata_.Clear();
}

const char* Tick::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bcl.Decimal AskPrice = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_askprice(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bcl.Decimal AskSize = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_asksize(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bcl.Decimal BidPrice = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_bidprice(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bcl.Decimal BidSize = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_bidsize(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Exchange = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_exchange();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Tick.Exchange"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bcl.Decimal Quantity = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_quantity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string SaleCondition = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_salecondition();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Tick.SaleCondition"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool Suspicious = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          suspicious_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TickType TickType = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_ticktype(static_cast<::TickType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Tick::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tick)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bcl.Decimal AskPrice = 1;
  if (this->has_askprice()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::askprice(this), target, stream);
  }

  // .bcl.Decimal AskSize = 2;
  if (this->has_asksize()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::asksize(this), target, stream);
  }

  // .bcl.Decimal BidPrice = 3;
  if (this->has_bidprice()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::bidprice(this), target, stream);
  }

  // .bcl.Decimal BidSize = 4;
  if (this->has_bidsize()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::bidsize(this), target, stream);
  }

  // string Exchange = 5;
  if (this->exchange().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exchange().data(), static_cast<int>(this->_internal_exchange().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Tick.Exchange");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_exchange(), target);
  }

  // .bcl.Decimal Quantity = 6;
  if (this->has_quantity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::quantity(this), target, stream);
  }

  // string SaleCondition = 7;
  if (this->salecondition().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_salecondition().data(), static_cast<int>(this->_internal_salecondition().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Tick.SaleCondition");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_salecondition(), target);
  }

  // bool Suspicious = 8;
  if (this->suspicious() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_suspicious(), target);
  }

  // .TickType TickType = 9;
  if (this->ticktype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_ticktype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tick)
  return target;
}

size_t Tick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tick)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Exchange = 5;
  if (this->exchange().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exchange());
  }

  // string SaleCondition = 7;
  if (this->salecondition().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_salecondition());
  }

  // .bcl.Decimal AskPrice = 1;
  if (this->has_askprice()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *askprice_);
  }

  // .bcl.Decimal AskSize = 2;
  if (this->has_asksize()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *asksize_);
  }

  // .bcl.Decimal BidPrice = 3;
  if (this->has_bidprice()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bidprice_);
  }

  // .bcl.Decimal BidSize = 4;
  if (this->has_bidsize()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bidsize_);
  }

  // .bcl.Decimal Quantity = 6;
  if (this->has_quantity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *quantity_);
  }

  // bool Suspicious = 8;
  if (this->suspicious() != 0) {
    total_size += 1 + 1;
  }

  // .TickType TickType = 9;
  if (this->ticktype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ticktype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Tick::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Tick)
  GOOGLE_DCHECK_NE(&from, this);
  const Tick* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Tick>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Tick)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Tick)
    MergeFrom(*source);
  }
}

void Tick::MergeFrom(const Tick& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tick)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.exchange().size() > 0) {

    exchange_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.exchange_);
  }
  if (from.salecondition().size() > 0) {

    salecondition_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.salecondition_);
  }
  if (from.has_askprice()) {
    _internal_mutable_askprice()->::bcl::Decimal::MergeFrom(from._internal_askprice());
  }
  if (from.has_asksize()) {
    _internal_mutable_asksize()->::bcl::Decimal::MergeFrom(from._internal_asksize());
  }
  if (from.has_bidprice()) {
    _internal_mutable_bidprice()->::bcl::Decimal::MergeFrom(from._internal_bidprice());
  }
  if (from.has_bidsize()) {
    _internal_mutable_bidsize()->::bcl::Decimal::MergeFrom(from._internal_bidsize());
  }
  if (from.has_quantity()) {
    _internal_mutable_quantity()->::bcl::Decimal::MergeFrom(from._internal_quantity());
  }
  if (from.suspicious() != 0) {
    _internal_set_suspicious(from._internal_suspicious());
  }
  if (from.ticktype() != 0) {
    _internal_set_ticktype(from._internal_ticktype());
  }
}

void Tick::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Tick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tick::CopyFrom(const Tick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tick::IsInitialized() const {
  return true;
}

void Tick::InternalSwap(Tick* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  exchange_.Swap(&other->exchange_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  salecondition_.Swap(&other->salecondition_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(askprice_, other->askprice_);
  swap(asksize_, other->asksize_);
  swap(bidprice_, other->bidprice_);
  swap(bidsize_, other->bidsize_);
  swap(quantity_, other->quantity_);
  swap(suspicious_, other->suspicious_);
  swap(ticktype_, other->ticktype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Tick::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TradeBar::InitAsDefaultInstance() {
  ::_TradeBar_default_instance_._instance.get_mutable()->close_ = const_cast< ::bcl::Decimal*>(
      ::bcl::Decimal::internal_default_instance());
  ::_TradeBar_default_instance_._instance.get_mutable()->endtime_ = const_cast< ::bcl::DateTime*>(
      ::bcl::DateTime::internal_default_instance());
  ::_TradeBar_default_instance_._instance.get_mutable()->high_ = const_cast< ::bcl::Decimal*>(
      ::bcl::Decimal::internal_default_instance());
  ::_TradeBar_default_instance_._instance.get_mutable()->low_ = const_cast< ::bcl::Decimal*>(
      ::bcl::Decimal::internal_default_instance());
  ::_TradeBar_default_instance_._instance.get_mutable()->open_ = const_cast< ::bcl::Decimal*>(
      ::bcl::Decimal::internal_default_instance());
  ::_TradeBar_default_instance_._instance.get_mutable()->period_ = const_cast< ::bcl::TimeSpan*>(
      ::bcl::TimeSpan::internal_default_instance());
  ::_TradeBar_default_instance_._instance.get_mutable()->volume_ = const_cast< ::bcl::Decimal*>(
      ::bcl::Decimal::internal_default_instance());
}
class TradeBar::_Internal {
 public:
  static const ::bcl::Decimal& close(const TradeBar* msg);
  static const ::bcl::DateTime& endtime(const TradeBar* msg);
  static const ::bcl::Decimal& high(const TradeBar* msg);
  static const ::bcl::Decimal& low(const TradeBar* msg);
  static const ::bcl::Decimal& open(const TradeBar* msg);
  static const ::bcl::TimeSpan& period(const TradeBar* msg);
  static const ::bcl::Decimal& volume(const TradeBar* msg);
};

const ::bcl::Decimal&
TradeBar::_Internal::close(const TradeBar* msg) {
  return *msg->close_;
}
const ::bcl::DateTime&
TradeBar::_Internal::endtime(const TradeBar* msg) {
  return *msg->endtime_;
}
const ::bcl::Decimal&
TradeBar::_Internal::high(const TradeBar* msg) {
  return *msg->high_;
}
const ::bcl::Decimal&
TradeBar::_Internal::low(const TradeBar* msg) {
  return *msg->low_;
}
const ::bcl::Decimal&
TradeBar::_Internal::open(const TradeBar* msg) {
  return *msg->open_;
}
const ::bcl::TimeSpan&
TradeBar::_Internal::period(const TradeBar* msg) {
  return *msg->period_;
}
const ::bcl::Decimal&
TradeBar::_Internal::volume(const TradeBar* msg) {
  return *msg->volume_;
}
void TradeBar::clear_close() {
  if (GetArenaNoVirtual() == nullptr && close_ != nullptr) {
    delete close_;
  }
  close_ = nullptr;
}
void TradeBar::clear_endtime() {
  if (GetArenaNoVirtual() == nullptr && endtime_ != nullptr) {
    delete endtime_;
  }
  endtime_ = nullptr;
}
void TradeBar::clear_high() {
  if (GetArenaNoVirtual() == nullptr && high_ != nullptr) {
    delete high_;
  }
  high_ = nullptr;
}
void TradeBar::clear_low() {
  if (GetArenaNoVirtual() == nullptr && low_ != nullptr) {
    delete low_;
  }
  low_ = nullptr;
}
void TradeBar::clear_open() {
  if (GetArenaNoVirtual() == nullptr && open_ != nullptr) {
    delete open_;
  }
  open_ = nullptr;
}
void TradeBar::clear_period() {
  if (GetArenaNoVirtual() == nullptr && period_ != nullptr) {
    delete period_;
  }
  period_ = nullptr;
}
void TradeBar::clear_volume() {
  if (GetArenaNoVirtual() == nullptr && volume_ != nullptr) {
    delete volume_;
  }
  volume_ = nullptr;
}
TradeBar::TradeBar()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TradeBar)
}
TradeBar::TradeBar(const TradeBar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_close()) {
    close_ = new ::bcl::Decimal(*from.close_);
  } else {
    close_ = nullptr;
  }
  if (from._internal_has_endtime()) {
    endtime_ = new ::bcl::DateTime(*from.endtime_);
  } else {
    endtime_ = nullptr;
  }
  if (from._internal_has_high()) {
    high_ = new ::bcl::Decimal(*from.high_);
  } else {
    high_ = nullptr;
  }
  if (from._internal_has_low()) {
    low_ = new ::bcl::Decimal(*from.low_);
  } else {
    low_ = nullptr;
  }
  if (from._internal_has_open()) {
    open_ = new ::bcl::Decimal(*from.open_);
  } else {
    open_ = nullptr;
  }
  if (from._internal_has_period()) {
    period_ = new ::bcl::TimeSpan(*from.period_);
  } else {
    period_ = nullptr;
  }
  if (from._internal_has_volume()) {
    volume_ = new ::bcl::Decimal(*from.volume_);
  } else {
    volume_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TradeBar)
}

void TradeBar::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TradeBar_qc_2eproto.base);
  ::memset(&close_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&volume_) -
      reinterpret_cast<char*>(&close_)) + sizeof(volume_));
}

TradeBar::~TradeBar() {
  // @@protoc_insertion_point(destructor:TradeBar)
  SharedDtor();
}

void TradeBar::SharedDtor() {
  if (this != internal_default_instance()) delete close_;
  if (this != internal_default_instance()) delete endtime_;
  if (this != internal_default_instance()) delete high_;
  if (this != internal_default_instance()) delete low_;
  if (this != internal_default_instance()) delete open_;
  if (this != internal_default_instance()) delete period_;
  if (this != internal_default_instance()) delete volume_;
}

void TradeBar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TradeBar& TradeBar::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TradeBar_qc_2eproto.base);
  return *internal_default_instance();
}


void TradeBar::Clear() {
// @@protoc_insertion_point(message_clear_start:TradeBar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && close_ != nullptr) {
    delete close_;
  }
  close_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && endtime_ != nullptr) {
    delete endtime_;
  }
  endtime_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && high_ != nullptr) {
    delete high_;
  }
  high_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && low_ != nullptr) {
    delete low_;
  }
  low_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && open_ != nullptr) {
    delete open_;
  }
  open_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && period_ != nullptr) {
    delete period_;
  }
  period_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && volume_ != nullptr) {
    delete volume_;
  }
  volume_ = nullptr;
  _internal_metadata_.Clear();
}

const char* TradeBar::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bcl.Decimal Close = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_close(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bcl.DateTime EndTime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_endtime(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bcl.Decimal High = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_high(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bcl.Decimal Low = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_low(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bcl.Decimal Open = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_open(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bcl.TimeSpan Period = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_period(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bcl.Decimal Volume = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_volume(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TradeBar::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TradeBar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bcl.Decimal Close = 1;
  if (this->has_close()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::close(this), target, stream);
  }

  // .bcl.DateTime EndTime = 2;
  if (this->has_endtime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::endtime(this), target, stream);
  }

  // .bcl.Decimal High = 3;
  if (this->has_high()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::high(this), target, stream);
  }

  // .bcl.Decimal Low = 4;
  if (this->has_low()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::low(this), target, stream);
  }

  // .bcl.Decimal Open = 5;
  if (this->has_open()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::open(this), target, stream);
  }

  // .bcl.TimeSpan Period = 6;
  if (this->has_period()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::period(this), target, stream);
  }

  // .bcl.Decimal Volume = 7;
  if (this->has_volume()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::volume(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TradeBar)
  return target;
}

size_t TradeBar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TradeBar)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bcl.Decimal Close = 1;
  if (this->has_close()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *close_);
  }

  // .bcl.DateTime EndTime = 2;
  if (this->has_endtime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *endtime_);
  }

  // .bcl.Decimal High = 3;
  if (this->has_high()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *high_);
  }

  // .bcl.Decimal Low = 4;
  if (this->has_low()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *low_);
  }

  // .bcl.Decimal Open = 5;
  if (this->has_open()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *open_);
  }

  // .bcl.TimeSpan Period = 6;
  if (this->has_period()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *period_);
  }

  // .bcl.Decimal Volume = 7;
  if (this->has_volume()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *volume_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TradeBar::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TradeBar)
  GOOGLE_DCHECK_NE(&from, this);
  const TradeBar* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TradeBar>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TradeBar)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TradeBar)
    MergeFrom(*source);
  }
}

void TradeBar::MergeFrom(const TradeBar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TradeBar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_close()) {
    _internal_mutable_close()->::bcl::Decimal::MergeFrom(from._internal_close());
  }
  if (from.has_endtime()) {
    _internal_mutable_endtime()->::bcl::DateTime::MergeFrom(from._internal_endtime());
  }
  if (from.has_high()) {
    _internal_mutable_high()->::bcl::Decimal::MergeFrom(from._internal_high());
  }
  if (from.has_low()) {
    _internal_mutable_low()->::bcl::Decimal::MergeFrom(from._internal_low());
  }
  if (from.has_open()) {
    _internal_mutable_open()->::bcl::Decimal::MergeFrom(from._internal_open());
  }
  if (from.has_period()) {
    _internal_mutable_period()->::bcl::TimeSpan::MergeFrom(from._internal_period());
  }
  if (from.has_volume()) {
    _internal_mutable_volume()->::bcl::Decimal::MergeFrom(from._internal_volume());
  }
}

void TradeBar::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TradeBar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradeBar::CopyFrom(const TradeBar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TradeBar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradeBar::IsInitialized() const {
  return true;
}

void TradeBar::InternalSwap(TradeBar* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(close_, other->close_);
  swap(endtime_, other->endtime_);
  swap(high_, other->high_);
  swap(low_, other->low_);
  swap(open_, other->open_);
  swap(period_, other->period_);
  swap(volume_, other->volume_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TradeBar::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::BaseData* Arena::CreateMaybeMessage< ::BaseData >(Arena* arena) {
  return Arena::CreateInternal< ::BaseData >(arena);
}
template<> PROTOBUF_NOINLINE ::List_BaseData* Arena::CreateMaybeMessage< ::List_BaseData >(Arena* arena) {
  return Arena::CreateInternal< ::List_BaseData >(arena);
}
template<> PROTOBUF_NOINLINE ::SecurityIdentifier* Arena::CreateMaybeMessage< ::SecurityIdentifier >(Arena* arena) {
  return Arena::CreateInternal< ::SecurityIdentifier >(arena);
}
template<> PROTOBUF_NOINLINE ::SidBox* Arena::CreateMaybeMessage< ::SidBox >(Arena* arena) {
  return Arena::CreateInternal< ::SidBox >(arena);
}
template<> PROTOBUF_NOINLINE ::Symbol* Arena::CreateMaybeMessage< ::Symbol >(Arena* arena) {
  return Arena::CreateInternal< ::Symbol >(arena);
}
template<> PROTOBUF_NOINLINE ::Tick* Arena::CreateMaybeMessage< ::Tick >(Arena* arena) {
  return Arena::CreateInternal< ::Tick >(arena);
}
template<> PROTOBUF_NOINLINE ::TradeBar* Arena::CreateMaybeMessage< ::TradeBar >(Arena* arena) {
  return Arena::CreateInternal< ::TradeBar >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
