
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the FlatSharp FBS to C# compiler (source hash: 3.0.0.jLnyz9X9XzIhG0JR6FSLMldokO5Cg9jn14n8GzIwsA4=)
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using FlatSharp;
using FlatSharp.Attributes;
[FlatBufferEnum(typeof(int))]
[System.Runtime.CompilerServices.CompilerGenerated]
public enum MarketDataType : int
{
    Base = (int)0,
    TradeBar = (int)1,
    Tick = (int)2,
    Auxiliary = (int)3,
    QuoteBar = (int)4,
    OptionChain = (int)5,
    FuturesChain = (int)6,
}

[FlatBufferEnum(typeof(int))]
[System.Runtime.CompilerServices.CompilerGenerated]
public enum OptionRight : int
{
    Call = (int)0,
    Put = (int)1,
}

[FlatBufferEnum(typeof(int))]
[System.Runtime.CompilerServices.CompilerGenerated]
public enum OptionStyle : int
{
    American = (int)0,
    European = (int)1,
}

[FlatBufferEnum(typeof(int))]
[System.Runtime.CompilerServices.CompilerGenerated]
public enum SecurityType : int
{
    Base = (int)0,
    Equity = (int)1,
    Option = (int)2,
    Commodity = (int)3,
    Forex = (int)4,
    Future = (int)5,
    Cfd = (int)6,
    Crypto = (int)7,
}

[FlatBufferEnum(typeof(int))]
[System.Runtime.CompilerServices.CompilerGenerated]
public enum TickType : int
{
    Trade = (int)0,
    Quote = (int)1,
    OpenInterest = (int)2,
}

[FlatBufferTable]
[System.Runtime.CompilerServices.CompilerGenerated]
public partial class BaseDataCollection : object
{
    partial void OnInitialized();
    public BaseDataCollection() { this.OnInitialized(); }
    public BaseDataCollection(BaseDataCollection source)
    {
        this.Ticks = source.Ticks?.Select(x => x != null ? new Tick(x) : null).ToList();
        this.TradeBars = source.TradeBars?.Select(x => x != null ? new TradeBar(x) : null).ToList();
        this.OnInitialized();
    }
    
    [FlatBufferItem(0)]
    public virtual IList<global::Tick> Ticks { get; set; }
    [FlatBufferItem(1)]
    public virtual IList<global::TradeBar> TradeBars { get; set; }
}
[FlatBufferTable]
[System.Runtime.CompilerServices.CompilerGenerated]
public partial class SecurityIdentifier : object
{
    partial void OnInitialized();
    public SecurityIdentifier() { this.OnInitialized(); }
    public SecurityIdentifier(SecurityIdentifier source)
    {
        this._symbol = source._symbol;
        this._properties = source._properties;
        this._underlying = source._underlying != null ? new SidBox(source._underlying) : null;
        this._hashCode = source._hashCode;
        this._strikePrice = source._strikePrice;
        this._optionStyle = source._optionStyle;
        this._optionRight = source._optionRight;
        this._date = source._date;
        this.SecurityType = source.SecurityType;
        this.OnInitialized();
    }
    
    [FlatBufferItem(0)]
    public virtual string _symbol { get; set; }
    [FlatBufferItem(1)]
    public virtual ulong _properties { get; set; }
    [FlatBufferItem(2)]
    public virtual global::SidBox _underlying { get; set; }
    [FlatBufferItem(3)]
    public virtual int _hashCode { get; set; }
    [FlatBufferItem(4)]
    public virtual double _strikePrice { get; set; }
    [FlatBufferItem(5)]
    public virtual global::OptionStyle _optionStyle { get; set; }
    [FlatBufferItem(6)]
    public virtual global::OptionRight _optionRight { get; set; }
    [FlatBufferItem(7)]
    public virtual long _date { get; set; }
    [FlatBufferItem(8)]
    public virtual global::SecurityType SecurityType { get; set; }
}
[FlatBufferTable]
[System.Runtime.CompilerServices.CompilerGenerated]
public partial class SidBox : object
{
    partial void OnInitialized();
    public SidBox() { this.OnInitialized(); }
    public SidBox(SidBox source)
    {
        this.SecurityIdentifierInner = source.SecurityIdentifierInner != null ? new SecurityIdentifier(source.SecurityIdentifierInner) : null;
        this.OnInitialized();
    }
    
    [FlatBufferItem(0)]
    public virtual global::SecurityIdentifier SecurityIdentifierInner { get; set; }
}
[FlatBufferTable]
[System.Runtime.CompilerServices.CompilerGenerated]
public partial class QCSymbol : object
{
    partial void OnInitialized();
    public QCSymbol() { this.OnInitialized(); }
    public QCSymbol(QCSymbol source)
    {
        this.HasUnderlying = source.HasUnderlying;
        this.ID = source.ID != null ? new SecurityIdentifier(source.ID) : null;
        this.SecurityType = source.SecurityType;
        this.Underlying = source.Underlying != null ? new QCSymbol(source.Underlying) : null;
        this.Value = source.Value;
        this.OnInitialized();
    }
    
    [FlatBufferItem(0)]
    public virtual bool HasUnderlying { get; set; }
    [FlatBufferItem(1)]
    public virtual global::SecurityIdentifier ID { get; set; }
    [FlatBufferItem(2)]
    public virtual global::SecurityType SecurityType { get; set; }
    [FlatBufferItem(3)]
    public virtual global::QCSymbol Underlying { get; set; }
    [FlatBufferItem(4)]
    public virtual string Value { get; set; }
}
[FlatBufferTable]
[System.Runtime.CompilerServices.CompilerGenerated]
public partial class Tick : object
{
    partial void OnInitialized();
    public Tick() { this.OnInitialized(); }
    public Tick(Tick source)
    {
        this.DataType = source.DataType;
        this.EndTime = source.EndTime;
        this.IsFillForward = source.IsFillForward;
        this.Symbol = source.Symbol != null ? new QCSymbol(source.Symbol) : null;
        this.Time = source.Time;
        this.Value = source.Value;
        this.AskPrice = source.AskPrice;
        this.AskSize = source.AskSize;
        this.BidPrice = source.BidPrice;
        this.BidSize = source.BidSize;
        this.Exchange = source.Exchange;
        this.Quantity = source.Quantity;
        this.SaleCondition = source.SaleCondition;
        this.Suspicious = source.Suspicious;
        this.TickType = source.TickType;
        this.OnInitialized();
    }
    
    [FlatBufferItem(0)]
    public virtual global::MarketDataType DataType { get; set; }
    [FlatBufferItem(1)]
    public virtual long EndTime { get; set; }
    [FlatBufferItem(2)]
    public virtual bool IsFillForward { get; set; }
    [FlatBufferItem(3)]
    public virtual global::QCSymbol Symbol { get; set; }
    [FlatBufferItem(4)]
    public virtual long Time { get; set; }
    [FlatBufferItem(5)]
    public virtual double Value { get; set; }
    [FlatBufferItem(6)]
    public virtual double AskPrice { get; set; }
    [FlatBufferItem(7)]
    public virtual double AskSize { get; set; }
    [FlatBufferItem(8)]
    public virtual double BidPrice { get; set; }
    [FlatBufferItem(9)]
    public virtual double BidSize { get; set; }
    [FlatBufferItem(10)]
    public virtual string Exchange { get; set; }
    [FlatBufferItem(11)]
    public virtual double Quantity { get; set; }
    [FlatBufferItem(12)]
    public virtual string SaleCondition { get; set; }
    [FlatBufferItem(13)]
    public virtual bool Suspicious { get; set; }
    [FlatBufferItem(14)]
    public virtual global::TickType TickType { get; set; }
}
[FlatBufferTable]
[System.Runtime.CompilerServices.CompilerGenerated]
public partial class TradeBar : object
{
    partial void OnInitialized();
    public TradeBar() { this.OnInitialized(); }
    public TradeBar(TradeBar source)
    {
        this.DataType = source.DataType;
        this.EndTime = source.EndTime;
        this.IsFillForward = source.IsFillForward;
        this.Symbol = source.Symbol != null ? new QCSymbol(source.Symbol) : null;
        this.Time = source.Time;
        this.Value = source.Value;
        this.Close = source.Close;
        this.High = source.High;
        this.Low = source.Low;
        this.Open = source.Open;
        this.Period = source.Period;
        this.Volume = source.Volume;
        this.OnInitialized();
    }
    
    [FlatBufferItem(0)]
    public virtual global::MarketDataType DataType { get; set; }
    [FlatBufferItem(1)]
    public virtual long EndTime { get; set; }
    [FlatBufferItem(2)]
    public virtual bool IsFillForward { get; set; }
    [FlatBufferItem(3)]
    public virtual global::QCSymbol Symbol { get; set; }
    [FlatBufferItem(4)]
    public virtual long Time { get; set; }
    [FlatBufferItem(5)]
    public virtual double Value { get; set; }
    [FlatBufferItem(6)]
    public virtual double Close { get; set; }
    [FlatBufferItem(7)]
    public virtual double High { get; set; }
    [FlatBufferItem(8)]
    public virtual double Low { get; set; }
    [FlatBufferItem(9)]
    public virtual double Open { get; set; }
    [FlatBufferItem(10)]
    public virtual long Period { get; set; }
    [FlatBufferItem(11)]
    public virtual double Volume { get; set; }
}
